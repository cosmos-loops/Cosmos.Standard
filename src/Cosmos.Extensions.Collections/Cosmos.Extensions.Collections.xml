<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Collections</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Collections.Arrays">
            <summary>
            Array utilities
            </summary>
            <summary>
            Array utilities
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[])">
            <summary>
            Cloning of a one-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[0:,0:])">
            <summary>
            Cloning of a two-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[0:,0:,0:])">
            <summary>
            Cloning of three-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[0:,0:,0:,0:])">
            <summary>
            Cloning of four-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[0:,0:,0:,0:,0:])">
            <summary>
            Cloning of five-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[0:,0:,0:,0:,0:,0:])">
            <summary>
            Cloning of six-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.Copy``1(``0[0:,0:,0:,0:,0:,0:,0:])">
            <summary>
            Cloning of seven-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Arrays.ToArraySafety``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To safe array
            </summary>
            <param name="src"></param>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Arrays.ToArraySafety``1(System.Array)">
            <summary>
            To safe array
            </summary>
            <param name="src"></param>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[],System.Int32,Cosmos.Collections.ArrayCopyOptions)">
            <summary>
            Cloning of a one-dimensional array from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="bytes"></param>
            <param name="numericVal"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[],System.Int64,Cosmos.Collections.ArrayCopyOptions)">
            <summary>
            Cloning of a one-dimensional array from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="bytes"></param>
            <param name="numericVal"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Cloning of a one-dimensional array from an <see cref="T:System.Array" /> starting at the specified source index.
            Guarantees that all changes are undone if the copy does not succeed completely.
            </summary>
            <param name="bytes"></param>
            <param name="sourceIndex"></param>
            <param name="length"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[],System.Int64,System.Int64)">
            <summary>
            Cloning of a one-dimensional array from an <see cref="T:System.Array" /> starting at the specified source index.
            Guarantees that all changes are undone if the copy does not succeed completely.
            </summary>
            <param name="bytes"></param>
            <param name="sourceIndex"></param>
            <param name="length"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[])">
            <summary>
            Cloning of a one-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[0:,0:])">
            <summary>
            Cloning of a two-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[0:,0:,0:])">
            <summary>
            Cloning of three-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[0:,0:,0:,0:])">
            <summary>
            Cloning of four-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[0:,0:,0:,0:,0:])">
            <summary>
            Cloning of five-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[0:,0:,0:,0:,0:,0:])">
            <summary>
            Cloning of six-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysExtensions.Copy``1(``0[0:,0:,0:,0:,0:,0:,0:])">
            <summary>
            Cloning of seven-dimensional array
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
            and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.
            Guarantees that all changes are undone if the copy does not succeed completely.
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceOffset"></param>
            <param name="destinationArray"></param>
            <param name="dstOffset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.BinarySearch(System.Array,System.Object)">
            <summary>
            Searches an entire one-dimensional sorted array for a specific element,
            using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified object.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer" /> interface.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>Searches a range of elements in a one-dimensional sorted array for a value,
            using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value,
            using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            Sets a range of elements in an array to the default value of each element type.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Clear(System.Array)">
            <summary>
            Sets all elements in an array to the default value of each element type.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array,
            and returns the index of its first occurrence. The range extends from a specified index
            to the end of the array.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array,
            and returns the index of ifs first occurrence. The range extends from a specified index
            for a specified number of elements.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.LastIndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within
            the entire one-dimensional <see cref="T:System.Array" />.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within
            the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends
            from the first element to the specified index.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within
            the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains
            the specified number of elements and ends at the specified index.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Reverse(System.Array)">
            <summary>
            Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
            Reverses the sequence of a subset of the elements in the one-dimensional <see cref="T:System.Array" />.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array)">
            <summary>
            Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using
            the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Array)">
            <summary>
            Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains
            the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" />
            using the <see cref="T:System.IComparable" /> implementation of each key.
            </summary>
            <param name="array"></param>
            <param name="items"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
            Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains
            the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" />
            using the specified <see cref="T:System.Collections.IComparer" />.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains
            the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" />
            using the <see cref="T:System.IComparable" /> implementation of each key.
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
            </summary>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects
            (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" />
            using the specified <see cref="T:System.Collections.IComparer" />.
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects
            (one contains the keys and the other contains the corresponding items) based on the keys in
            the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.ByteLength(System.Array)">
            <summary>
            Returns the number of bytes in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.GetByte(System.Array,System.Int32)">
            <summary>
            Retrieves the byte at the specified location in the specified array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArraysShortcutExtensions.SetByte(System.Array,System.Int32,System.Byte)">
            <summary>
             Assigns a specified value to a byte at a particular location in a specified array.
             </summary>
             <param name="array"></param>
             <param name="index"></param>
             <param name="value"></param>
        </member>
        <member name="M:Cosmos.Collections.CollConv.ToEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            To Enumerable
            </summary>
            <param name="enumerator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConv.ToEnumerableAfter``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            To Enumerable After
            </summary>
            <param name="enumerator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConv.ToIndexedSequence``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To index sequence
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConv.ToSortedArray``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            To sorted array
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConv.ToSortedArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To sorted array
            </summary>
            <param name="source"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConv.AsOptionals``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            As Nullables
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConv.AsEnumerableProxy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            As enumerable proxy
            </summary>
            <param name="enumerable"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConv.AsNullWhenEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Null if empty
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            To Enumerable
            </summary>
            <param name="enumerator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToEnumerableAfter``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            To Enumerable After
            </summary>
            <param name="enumerator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToIndexedSequence``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To index sequence
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToSortedArray``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            To sorted array
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToSortedArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To sorted array
            </summary>
            <param name="source"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To hashset
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            To HashSet
            </summary>
            <param name="source"></param>
            <param name="ignoreDup"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            To HashSet
            </summary>
            <param name="source"></param>
            <param name="keyFunc"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvExtensions.ToHashSetIgnoringDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To HashSet ignore duplicates
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvShortcutExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            To string list
            </summary>
            <param name="source"></param>
            <param name="stringConverter"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollConvShortcutExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            To list
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.Collections.Colls">
            <summary>
            Collections utilities
            </summary>
            <summary>
            Collections utilities
            </summary>
            <summary>
            Collections utilities
            </summary>
            <summary>
            Collections utilities
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Colls.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="equalityComparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="condition"></param>
            <param name="equalityComparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Check whether the set contains members of the given condition.<br />
            检查集合中是否包含给定条件的成员。
            </summary>
            <param name="source"></param>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.ContainsAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Check if a set has a specified number of members. <br />
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.ContainsAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Check if a set has a specified number of members. <br />
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source"></param>
            <param name="condition"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.ContainsAtLeast``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Check if a set has a specified number of members. <br />
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.Empty``1">
            <summary>
            Create an empty list instance of the specified type T. <br />
            创建一个指定类型 T 的空列表实例。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Index of
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Index of
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <param name="equalityComparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.MoveToFirst``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Move to first
            </summary>
            <param name="source"></param>
            <param name="element"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Make the collection random order<br />
            打乱一个集合的顺序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OrderByShuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle in place
            </summary>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Colls.OrderByShuffle``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle in place
            </summary>
            <param name="items"></param>
            <param name="times"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Colls.OrderByShuffleAndNewInstance``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle to new list
            </summary>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OrderByShuffleAndNewInstance``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle to new list
            </summary>
            <param name="items"></param>
            <param name="times"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.UniqueCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Unique Count
            </summary>
            <param name="source"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.UniqueCount``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Unique Count
            </summary>
            <param name="source"></param>
            <param name="valCalculator"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfList``1">
            <summary>
            Create a list instance of the specified type T. <br />
            创建一个指定类型 T 的列表实例。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfList``1(``0[])">
            <summary>
            Create a list instance of the specified type T. <br />
            创建一个指定类型 T 的列表实例。
            </summary>
            <param name="params"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfList``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create a list instance of the specified type T. <br />
            创建一个指定类型 T 的列表实例。
            </summary>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create a list instance of the specified type T. <br />
            创建一个指定类型 T 的列表实例。
            </summary>
            <param name="list"></param>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Queryable page from the given collection by page number and page size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable">data from database</param>
            <param name="pageNumber">page number</param>
            <param name="itemCountPerPage">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Enumerable page from the given collection by page number and page size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">data in memory</param>
            <param name="pageNumber">page number</param>
            <param name="itemCountPerPage">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPageSet``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create a page set from the given collection with page size and member count limit.
            </summary>
            <param name="enumerable"></param>
            <param name="pageSize"></param>
            <param name="limitedMemberCount"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPageSet``1(System.Linq.IQueryable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create a page set from the given collection with page size and member count limit.
            </summary>
            <param name="queryable"></param>
            <param name="pageSize"></param>
            <param name="limitedMemberCount"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPageMember``1(``0,System.Int32,System.Int32@)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMember`1"/>
            </summary>
            <param name="memberValue"></param>
            <param name="offset"></param>
            <param name="startIndex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPageMember``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMember`1"/>
            </summary>
            <param name="memberColl"></param>
            <param name="index"></param>
            <param name="offset"></param>
            <param name="startIndex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.OfPageMember``1(Cosmos.Collections.Pagination.IQueryEntryState{``0},System.Int32,System.Int32@)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMember`1"/>
            </summary>
            <param name="state"></param>
            <param name="offset"></param>
            <param name="startIndex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.RemoveDuplicates``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove deplicates
            </summary>
            <param name="source"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.RemoveDuplicates``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Remove buplicates
            </summary>
            <param name="source"></param>
            <param name="duplicatePredicate"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCheck"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.RemoveDuplicatesIgnoreCase(System.Collections.Generic.IList{System.String})">
            <summary>
            Remove duplicates ignore case
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.RemoveIf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Remove where...<br />
            移除满足条件的成员，并最终返回筛选后的结果
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.RemoveRangeSafety``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Safe remove range<br />
            安全地移除指定范围内的成员
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.Merge``1(``0,System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Merge
            </summary>
            <param name="first"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.Merge``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            将两个具有相同种类的元素的集合合并
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"> </param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.Merge``1(System.Collections.Generic.IEnumerator{``0},``0)">
            <summary>
            将一个元素添加到一个具有相同种类的元素的集合内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merge<br />
            合并集合
            </summary>
            <param name="source"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Merge<br />
            合并集合
            </summary>
            <param name="source"></param>
            <param name="right"></param>
            <param name="limit"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Colls.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BeContainedIn``1(``0,``0[])">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BeContainedIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="equalityComparer"></param>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="equalityComparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BeContainedIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            In
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <param name="condition"></param>
            <param name="equalityComparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Check whether the set contains members of the given condition.<br />
            检查集合中是否包含给定条件的成员。
            </summary>
            <param name="source"></param>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.ContainsAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Check if a set has a specified number of members. <br />
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.ContainsAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Check if a set has a specified number of members. <br />
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source"></param>
            <param name="condition"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.ContainsAtLeast``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Check if a set has a specified number of members. <br />
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Index of
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Index of
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <param name="equalityComparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Make the collection random order<br />
            打乱一个集合的顺序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.OrderByShuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle in place
            </summary>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.OrderByShuffle``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle in place
            </summary>
            <param name="items"></param>
            <param name="times"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.OrderByShuffleAndNewInstance``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle to new list
            </summary>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.OrderByShuffleAndNewInstance``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle to new list
            </summary>
            <param name="items"></param>
            <param name="times"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.UniqueCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Unique Count
            </summary>
            <param name="source"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.UniqueCount``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Unique Count
            </summary>
            <param name="source"></param>
            <param name="valCalculator"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.RemoveDuplicates``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove duplicates
            </summary>
            <param name="source"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.RemoveDuplicates``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Remove duplicates
            </summary>
            <param name="source"></param>
            <param name="duplicatePredicate"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCheck"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.RemoveDuplicatesIgnoreCase(System.Collections.Generic.IList{System.String})">
            <summary>
            Remove duplicates ignore case
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.RemoveIf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Remove where...<br />
            移除满足条件的成员，并最终返回筛选后的结果
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merge<br />
            合并集合
            </summary>
            <param name="source"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Merge<br />
            合并集合
            </summary>
            <param name="source"></param>
            <param name="right"></param>
            <param name="limit"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollsExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictConv.Cast``4(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Cast
            </summary>
            <param name="source"></param>
            <typeparam name="TFromKey"></typeparam>
            <typeparam name="TFromValue"></typeparam>
            <typeparam name="TToKey"></typeparam>
            <typeparam name="TToValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictConv.ToDictionary``2(System.Collections.Hashtable)">
            <summary>
            To dictionary
            </summary>
            <param name="hash"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConv.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConv.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="equalityComparer"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictConv.ToTuple``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            To tuple...
            </summary>
            <param name="dictionary"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConv.ToSortedArrayByValue``1(System.Collections.Generic.Dictionary{``0,System.Int32},System.Boolean)">
            <summary>
            To sorted array by value
            </summary>
            <param name="dictionary"></param>
            <param name="asc"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConv.ToSortedArrayByKey``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To sorted array by key
            </summary>
            <param name="dictionary"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.Cast``4(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Cast
            </summary>
            <param name="source"></param>
            <typeparam name="TFromKey"></typeparam>
            <typeparam name="TFromValue"></typeparam>
            <typeparam name="TToKey"></typeparam>
            <typeparam name="TToValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.ToDictionary``2(System.Collections.Hashtable)">
            <summary>
            To dictionary
            </summary>
            <param name="hash"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="equalityComparer"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.ToTuple``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            To tuple...
            </summary>
            <param name="dictionary"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.ToSortedArrayByValue``1(System.Collections.Generic.Dictionary{``0,System.Int32},System.Boolean)">
            <summary>
            To sorted array by value
            </summary>
            <param name="dictionary"></param>
            <param name="asc"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictConvExtensions.ToSortedArrayByKey``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To sorted array by key
            </summary>
            <param name="dictionary"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.AddValueOrOverride``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Add or override
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.Collections.Dicts.AddValueOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            Add or update
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="insertFunc"></param>
            <param name="updateFunc"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Dicts.AddValueOrDo``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            Add or update
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="insertFunc"></param>
            <param name="doAct"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.AddValueIfNotExist``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Add if not exist
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.Add``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Merge the second dictionary into the first one
            </summary>
            <param name="source"></param>
            <param name="dict"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueCalculator"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0,``1)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0,``1@)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Get or add
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get or add
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="newValueCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GetValueOrAddNewInstance``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Get or add new default instance
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GroupByAsDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Group by as dictionary
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.GroupByAsDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Group by as dictionary
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Dicts.SetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Set value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.Add``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Add one dictionary into another one.
            </summary>
            <param name="source"></param>
            <param name="dict"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.Add``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Add one key-value-pair into the given dictionary.
            </summary>
            <param name="source"></param>
            <param name="pair"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.AddValueOrOverride``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Add or override
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.AddValueOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            Add or update
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="insertFunc"></param>
            <param name="updateFunc"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.AddValueOrDo``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            Add or update
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="insertFunc"></param>
            <param name="doAct"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.AddValueIfNotExist``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Add if not exist
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueCalculator"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0,``1)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0,``1@)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Get or add
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get or add
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="newValueCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.GetValueOrAddNewInstance``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Get or add new default instance
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.DictsExtensions.SetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Set value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Cosmos.Collections.EnumerableProxy`1">
            <summary>
            Enumerable proxy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.EnumerableProxy`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Enumerable proxy
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Cosmos.Collections.EnumerableProxy`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Collections.Pagination.EmptyPage`1">
            <summary>
            Empty page
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EmptyPage`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.EmptyPage`1"/>
            </summary>
        </member>
        <member name="T:Cosmos.Collections.Pagination.EnumerablePage`1">
            <summary>
            Enumerable page
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EnumerablePage`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enumerable page
            </summary>
            <param name="enumerable"></param>
            <param name="currentPageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalMemberCount"></param>
            <param name="sourceIsFull"></param>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EnumerablePage`1.Empty">
            <summary>
            Get empty page
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.Internals.LimitedMembersTypes">
            <summary>
            Limited members type
            </summary>
        </member>
        <member name="F:Cosmos.Collections.Pagination.Internals.LimitedMembersTypes.Unlimited">
            <summary>
            Unlimited
            </summary>
        </member>
        <member name="F:Cosmos.Collections.Pagination.Internals.LimitedMembersTypes.Customize">
            <summary>
            Customize
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageableCollectionFactory.GetRealMemberCountFunc">
            <summary>
            Get real member count<br />.
            first parameter(l) means limitedMemberCount<br />,
            second parameter(c) means count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageableCollectionFactory.GetRealPageCountFunc">
            <summary>
            Get real page count<br />.
            first parameter(m) means real member count, which has been gotten from <see cref="M:Cosmos.Collections.Pagination.Internals.PageableCollectionFactory.GetRealMemberCountFunc"/><br />,
            second parameter(s) means page size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageableCollectionFactory.CreatePageSet``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Make enumerable result to EnumerablePage collection
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="enumerable">original enumerable result</param>
            <param name="pageSize">page size</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageableCollectionFactory.CreatePageSet``1(System.Linq.IQueryable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Make queryable source to QueryablePage collection
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryable">original queryable result</param>
            <param name="pageSize">page size</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Collections.Pagination.Internals.PageableConstants.DEFAULT_PAGE_SIZE">
            <summary>
            Default page size
            </summary>
        </member>
        <member name="F:Cosmos.Collections.Pagination.Internals.PageableConstants.MAX_MEMBER_ITEMS_SUPPORT">
            <summary>
            Max member items support
            </summary>
        </member>
        <member name="T:Cosmos.Collections.Pagination.Internals.PageMemberFactory">
            <summary>
            Page member factory
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageMemberFactory.Create``1(``0,System.Int32,System.Int32@)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMember`1"/>
            </summary>
            <param name="memberValue"></param>
            <param name="offset"></param>
            <param name="startIndex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageMemberFactory.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMember`1"/>
            </summary>
            <param name="memberColl"></param>
            <param name="index"></param>
            <param name="offset"></param>
            <param name="startIndex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.PageMemberFactory.Create``1(Cosmos.Collections.Pagination.IQueryEntryState{``0},System.Int32,System.Int32@)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMember`1"/>
            </summary>
            <param name="state"></param>
            <param name="offset"></param>
            <param name="startIndex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.Internals.QueryEntryState`1">
            <summary>
            Query entry state
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.Internals.QueryEntryState`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            Query entry state
            </summary>
            <param name="queryable">Orgin queryable result</param>
            <param name="skip">skip number</param>
            <param name="take">take number</param>
        </member>
        <member name="P:Cosmos.Collections.Pagination.Internals.QueryEntryState`1.AllValues">
            <summary>
            Get all value.
            </summary>
        </member>
        <member name="T:Cosmos.Collections.Pagination.IPage">
            <summary>
            Page interface
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.TotalPageCount">
            <summary>
            Gets total page count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.TotalMemberCount">
            <summary>
            Gets total member count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.CurrentPageNumber">
            <summary>
            Gets current page number
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.PageSize">
            <summary>
            Gets page size
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.CurrentPageSize">
            <summary>
            Gets current page size, may equal to or less than page size.
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.HasPrevious">
            <summary>
            Has previous. If this page is the first page, then returns false.
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage.HasNext">
            <summary>
            Has next. If this page is the last page, then returns false.
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.IPage.GetMetadata">
            <summary>
            Get metadata of page
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.IPageable">
            <summary>
            Pageable interface
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPageable.PageSize">
            <summary>
            Gets page size
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPageable.MemberCount">
            <summary>
            Gets member count
            </summary>
        </member>
        <member name="T:Cosmos.Collections.Pagination.IPageable`1">
            <summary>
            Pageable interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.IPageable`1.GetPage(System.Int32)">
            <summary>
            Get page
            </summary>
            <param name="pageNumber">Page number</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.IPageMember`1">
            <summary>
            Page member wrapper interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPageMember`1.Value">
            <summary>
            Gets value of current member
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPageMember`1.Offset">
            <summary>
            Gets offset of current member
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPageMember`1.ItemNumber">
            <summary>
            Gets item number of current member
            </summary>
        </member>
        <member name="T:Cosmos.Collections.Pagination.IPage`1">
            <summary>
            Page interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IPage`1.Item(System.Int32)">
            <summary>
            Gets page member indexer
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Cosmos.Collections.Pagination.IPage`1.ToOriginalItems">
            <summary>
            Convert to original items
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.IQueryEntryState`1">
            <summary>
            Query entry state interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Collections.Pagination.IQueryEntryState`1.AllValues">
            <summary>
            Gets all values
            </summary>
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageableEnumerable`1">
            <summary>
            EnumerablePage collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableEnumerable`1.GetSpecifiedPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get special page
            </summary>
            <param name="currentPageNumber"></param>
            <param name="pageSize"></param>
            <param name="realMemberCount"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageableQueryable`1">
            <summary>
            QueryablePage collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableQueryable`1.GetSpecifiedPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get special page
            </summary>
            <param name="currentPageNumber"></param>
            <param name="pageSize"></param>
            <param name="realMemberCount"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageableSetBase`1">
            <summary>
            Abstract PageableSet base
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Cosmos.Collections.Pagination.PageableSetBase`1._lazyPinedPagesCache">
            <summary>
            Lazy pined paged cache.
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSetBase`1._limitedType">
            <summary>
            Gets limited type
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSetBase`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSetBase`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSetBase`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSetBase`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSetBase`1.PageSize">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSetBase`1.MemberCount">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSetBase`1.LimitedMemberCount">
            <summary>
            Gets limited member count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSetBase`1.PageCount">
            <summary>
            Gets page count
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSetBase`1.GetPage(System.Int32)">
            <summary>
            Get specific page from current PaginableSet
            </summary>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSetBase`1.GetSpecifiedPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get specified page
            </summary>
            <param name="currentPageNumber"></param>
            <param name="pageSize"></param>
            <param name="realMemberCount"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageableSettings">
            <summary>
            Pageable settings
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSettings.DefaultPageSize">
            <summary>
            Gets or sets default page size
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSettings.MaxMemberItems">
            <summary>
            Gets or sets max member items
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageableSettingsManager.Settings">
            <summary>
            Get pageable settings
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageableSettingsManager.UpdateSettings(Cosmos.Collections.Pagination.PageableSettings)">
            <summary>
            Update pageable settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageBase`1">
            <summary>
            Abstract page base
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Cosmos.Collections.Pagination.PageBase`1._memberList">
            <summary>
            Member list
            </summary>
        </member>
        <member name="F:Cosmos.Collections.Pagination.PageBase`1._initializeAction">
            <summary>
            Initialize action
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageBase`1.#ctor(System.Boolean)">
            <summary>
            Page base
            </summary>
            <param name="sourceIsFull"></param>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageBase`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.SourceIsFull">
            <summary>
            Offset mode
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.TotalPageCount">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.TotalMemberCount">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.CurrentPageNumber">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.PageSize">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.CurrentPageSize">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.HasPrevious">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.HasNext">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageBase`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageBase`1.GetMetadata">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageBase`1.ToOriginalItems">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageExtensions">
            <summary>
            Extensions for page
            </summary>
            <summary>
            Extensions for solid page
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.IsFirst(Cosmos.Collections.Pagination.IPage)">
            <summary>
            Is current page thr first page?
            </summary>
            <param name="page">Page</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.IsLast(Cosmos.Collections.Pagination.IPage)">
            <summary>
            Is current page the last page?
            </summary>
            <param name="page">Page</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.FromMemberNumber(Cosmos.Collections.Pagination.IPage)">
            <summary>
            The number of the first item of current page.
            </summary>
            <param name="page">Page</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.ToMemberNumber(Cosmos.Collections.Pagination.IPage)">
            <summary>
            The number of the last item of current page.
            </summary>
            <param name="page">Page</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.AsPageable``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            Make original enumerable result to EnumerablePage collection.
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="enumerable">original enumerable result</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.AsPageable``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Make original enumerable result to EnumerablePage collection.
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="enumerable">original enumerable result</param>
            <param name="pageSize">page size</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.GetPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get specific page from original enumerable result
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="enumerable">original enumerable result</param>
            <param name="pageNumber">page number</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.GetPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Get specific page from original enumerable result
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="enumerable">original enumerable result</param>
            <param name="pageNumber">page number</param>
            <param name="pageSize">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.AsPageable``1(System.Linq.IQueryable{``0},System.Nullable{System.Int32})">
            <summary>
            Make original queryable source to QueryablePage collection.
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryable">original queryable result</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.AsPageable``1(System.Linq.IQueryable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Make original queryable source to QueryablePage collection.
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryable">original queryable result</param>
            <param name="pageSize">page size</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.GetPage``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Get specific page from original queryable source
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryable">original queryable result</param>
            <param name="pageNumber">page number</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.GetPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Get specific page from original queryable source
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryable">original queryable result</param>
            <param name="pageNumber">page number</param>
            <param name="pageSize">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.GetPageAsync``1(System.Threading.Tasks.Task{System.Linq.IQueryable{``0}},System.Int32)">
            <summary>
            Get specific page from original queryable source
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryableTask"></param>
            <param name="pageNumber">page number</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageExtensions.GetPageAsync``1(System.Threading.Tasks.Task{System.Linq.IQueryable{``0}},System.Int32,System.Int32)">
            <summary>
            Get specific page from original queryable source
            </summary>
            <typeparam name="T">element type of your queryable source</typeparam>
            <param name="queryableTask"></param>
            <param name="pageNumber">page number</param>
            <param name="pageSize">page size</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageMember`1">
            <summary>
            Page member
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMember`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMember`1.Offset">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMember`1.ItemNumber">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Collections.Pagination.PageMetadata">
            <summary>
            Page metadata
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageMetadata.#ctor(Cosmos.Collections.Pagination.IPage)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Pagination.PageMetadata"/>.
            </summary>
            <param name="page"></param>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.TotalPageCount">
            <summary>
            Gets total page count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.RealPageCount">
            <summary>
            Gets real page count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.TotalMemberCount">
            <summary>
            Gets total member count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.CurrentPageNumber">
            <summary>
            Gets current page number
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.PageSize">
            <summary>
            Gets page size
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.CurrentPageSize">
            <summary>
            Gets current page size
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.HasPrevious">
            <summary>
            Has previous. If this page is the first page, then returns false.
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Pagination.PageMetadata.HasNext">
            <summary>
            Has next. If this page is the last page, then returns false.
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.PageMetadata.ToString">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Collections.Pagination.QueryablePage`1">
            <summary>
            Queryable page
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Pagination.QueryablePage`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Queryable page
            </summary>
            <param name="queryable"></param>
            <param name="currentPageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalMemberCount"></param>
            <param name="sourceIsFull"></param>
        </member>
        <member name="M:Cosmos.Collections.Pagination.QueryablePage`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Queryable page
            </summary>
            <param name="enumerable"></param>
            <param name="currentPageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalMembersCount"></param>
        </member>
        <member name="M:Cosmos.Collections.Pagination.QueryablePage`1.Empty">
            <summary>
            Get empty page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyCollConv.AsList``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            As list
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyCollConvExtensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To readonly collection
            </summary>
            <param name="src"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyCollConvExtensions.AsList``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            As list
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyCollsHelper.WrapInReadOnlyCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            Wrap in readonly connection
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyCollsHelper.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Append
            </summary>
            <param name="source"></param>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.Append``1(System.Collections.Generic.IReadOnlyCollection{``0},``0)">
            <summary>
            Append
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.Empty``1">
            <summary>
            Gets empty readonly collection.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.OfList``1(``0[])">
            <summary>
            Create a readonly list instance of the specified type T. <br />
            创建一个指定类型 T 的只读列表实例。
            </summary>
            <param name="params"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.OfList``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create a readonly list instance of the specified type T. <br />
            创建一个指定类型 T 的只读列表实例。
            </summary>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.OfList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create a readonly list instance of the specified type T. <br />
            创建一个指定类型 T 的只读列表实例。
            </summary>
            <param name="list"></param>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyColls.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyCollsExtensions.Append``1(System.Collections.Generic.IReadOnlyCollection{``0},``0)">
            <summary>
            Append
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConv.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConv.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <param name="comparer"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConv.ToDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConv.ToDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConv.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConv.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConvExtensions.AsReadOnlyDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConvExtensions.AsReadOnlyDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <param name="comparer"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConvExtensions.AsReadOnlyDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <param name="keySelector"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConvExtensions.AsReadOnlyDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConvExtensions.AsReadOnlyDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictConvExtensions.AsReadOnlyDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            To readonly dictionary
            </summary>
            <param name="src"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDictsHelper.WrapInReadOnlyDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Wrap in readonly dictionary
            </summary>
            <param name="dictionary"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.Empty``2">
            <summary>
            Gets empty readonly dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueCalculator"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0,``1)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ReadOnlyDicts.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0,``1@)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Optionals.OptionalCollsExtensions.RemoveRangeSafety``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Safe remove range<br />
            安全地移除指定范围内的成员
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Optionals.OptionalCollsExtensions.ToArraySafety``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To safe array
            </summary>
            <param name="src"></param>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Optionals.OptionalCollsExtensions.ToArraySafety``1(System.Array)">
            <summary>
            To safe array
            </summary>
            <param name="src"></param>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Optionals.OptionalDictsExtensions.GetOptionalValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Try get value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Optionals.OptionalDictsExtensions.GetOptionalValue``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaryColl"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
