<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Reflection</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants">
            <summary>
            Exception arg constants
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants.MESSAGE">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants.PARAM_NAME">
            <summary>
            Param Name
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants.INNER_EXCEPTION">
            <summary>
            Inner exception
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants.INNER">
            <summary>
            Inner exception, usage for InvalidProgramException
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants.ACTUAL_VALUE">
            <summary>
            Actual value
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingDescriptors.ExceptionArgConstants.ERROR_CODE">
            <summary>
            Error code
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions">
            <summary>
            Exception building options.<br />
            异常构建器选项。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions"/>.<br />
            构建一个新的 <see cref="T:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions"/> 实例。
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions.ExceptionType">
            <summary>
            Gets exception type.<br />
            获取异常类型。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions.AddArg``1(System.String,``0)">
            <summary>
            Add args.<br />
            添加参数。
            </summary>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <typeparam name="TArgVal"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingDescriptors.ExceptionBuildingOptions.AddArg``1(System.String,``0,System.Func{``0,System.Boolean})">
            <summary>
            Add args.<br />
            添加参数。
            </summary>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <param name="predicate"></param>
            <typeparam name="TArgVal"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionBuilder">
            <summary>
            Exception builder
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Create``1">
            <summary>
            Create a new builder for of <typeparamref name="TException"/> <see cref="T:Cosmos.Exceptions.ExceptionBuilder`1"/>.<br />
            If you want to use this feature, please add following xml-node in your csproj file:<br />
            &lt;PreserveCompilationContext&gt;true&lt;/PreserveCompilationContext&gt;<br />
            This feature is supported by LanX, the author of NCC Natasha.<br />
            <br />
            创建一个用于构建 <typeparamref name="TException"/> <see cref="T:Cosmos.Exceptions.ExceptionBuilder`1"/> 的 builder。<br />
            如果你想使用此功能，需要在 csproj 文件中添加下述 Xml 节点：<br />
            &lt;PreserveCompilationContext&gt;true&lt;/PreserveCompilationContext&gt;<br />
            本功能由 NCC Natasha 的作者 LanX 提供支持。
            </summary>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionBuilder`1">
            <summary>
            Exception builder<br />
            异常构建器。
            </summary>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.ExceptionBuilder`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.ExceptionBuilder`1"/> 实例。
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionBuilder`1.TargetType">
            <summary>
            Target type of exception.<br />
            目标异常的类型
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.InnerException(System.Exception)">
            <summary>
            Sets inner exception.<br />
            设置内部异常。
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.ParamName(System.String)">
            <summary>
            Sets parameter's name.<br />
            设置参数名称。
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.Message(System.String)">
            <summary>
            Sets exception message.<br />
            设置异常消息。
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.ActualValue(System.Object)">
            <summary>
            Sets actual value.<br />
            设置实际的值。
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.ErrorCode(System.Int32)">
            <summary>
            Sets error code.<br />
            设置错误代码（Error Code）。
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.Build">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.BuildAndThrow">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder`1.BuildAndThrowAsValidationError">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.IFluentExceptionBuilder`1">
            <summary>
            Interface for fluent exception builder.<br />
            流畅异常构建器接口。
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.IFluentExceptionBuilder`1.TargetType">
            <summary>
            Target type of exception.<br />
            目标异常的类型
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.InnerException(System.Exception)">
            <summary>
            With inner exception.<br />
            This value will be used for constructor with param-name 'innerException' and 'inner' (just for <see cref="T:System.InvalidProgramException"/>).<br />
            设置内部异常。
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ParamName(System.String)">
            <summary>
            With parameter's name.<br />
            This value will be used for constructor with param-name 'paramName'.<br />
            设置参数名称。
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Message(System.String)">
            <summary>
            With message.<br />
            This value will be used for constructor with param-name 'message'.<br />
            设置异常消息。
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ActualValue(System.Object)">
            <summary>
            Actual value.<br />
            This value will be used for constructor with param-name 'actualValue'.<br />
            设置实际的值。
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ErrorCode(System.Int32)">
            <summary>
            Error code.<br />
            This value will be used for constructor with param-name 'errorCode'.<br />
            设置错误代码（Error Code）。
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Build">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.BuildAndThrow">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.BuildAndThrowAsValidationError">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="T:Cosmos.Finders.BaseAttributeFinder`1">
            <summary>
            Attribute type finder
            </summary>
            <typeparam name="TAttributeType"></typeparam>
        </member>
        <member name="T:Cosmos.Finders.BaseTypeFinder`1">
            <summary>
            Base type finder
            </summary>
        </member>
        <member name="T:Cosmos.Finders.DirectoryAssemblyFinder">
            <summary>
            Directory assembly finder
            </summary>
        </member>
        <member name="T:Cosmos.Finders.IAllAssemblyFinder">
            <summary>
            A finder for all Assembly
            </summary>
        </member>
        <member name="T:Cosmos.Finders.IAssemblyFinder">
            <summary>
            A finder for Assembly
            </summary>
        </member>
        <member name="T:Cosmos.Finders.IMethodInfoFinder">
            <summary>
            A finder for MethodInfo
            </summary>
        </member>
        <member name="M:Cosmos.Finders.IMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="type">要查找的类型</param>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.IMethodInfoFinder.FindAll(System.Type)">
            <summary>
            查找所有项
            </summary>
            <param name="type">要查找的类型</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Finders.ITypeFinder">
            <summary>
            A finder for Type
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.CosmosTypeInstanceExtensions">
            <summary>
            Cosmos type instance extensions
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.CosmosTypeInstanceExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <typeparam name="TTypeInstance"></typeparam>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.InstanceScanner`1">
            <summary>
            Instance Scanner<br />
            实例扫描器
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
            <param name="scannerName"></param>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor(System.String,System.Type)">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
            <param name="scannerName"></param>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.ScanAndReturnInstances">
            <summary>
            Scan, and return instances.<br />
            扫描，并返回实例集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.LockExtensions">
            <summary>
            Cosmos lock extensions
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndRun(System.Object,System.Action)">
            <summary>
            Lock the specified resource, and then execute the delegation.<br />
            对指定的资源进行加锁，然后执行委托。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndRun``1(``0,System.Action{``0})">
            <summary>
            Lock the specified resource, and then execute the delegation.<br />
            对指定的资源进行加锁，然后执行委托。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndReturn``1(System.Object,System.Func{``0})">
            <summary>
            Lock the specified resource, execute the commission and return the result.<br />
            对指定的资源进行加锁，执行委托并返回结果。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndReturn``2(``0,System.Func{``0,``1})">
            <summary>
            Lock the specified resource, execute the commission and return the result.<br />
            对指定的资源进行加锁，执行委托并返回结果。
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.NTypes">
            <summary>
            Advanced Types utilities
            </summary>
            <summary>
            Advanced Types utilities
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstance``1(System.Object[])">
            <summary>
            Create instance
            </summary>
            <typeparam name="TInstance">Special type you need to return.</typeparam>
            <param name="args">Arguments for such type's constructor</param>
            <returns>Instance of special type</returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Create instance
            </summary>
            <typeparam name="TInstance">Special type you need to return.</typeparam>
            <param name="type">Special type</param>
            <param name="args">Arguments for such type's constructor</param>
            <returns>Instance of special type</returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstance(System.Type,System.Object[])">
            <summary>
            Create instance
            </summary>
            <param name="type">Special type</param>
            <param name="args">Arguments for such type's constructor</param>
            <returns>Instance of special type</returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstanceWithoutParam``1">
            <summary>
            Create instance with no param
            </summary>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstance``1(System.Collections.Generic.IEnumerable{Cosmos.Reflection.CtorArgDescriptor})">
            <summary>
            Create instance
            </summary>
            <param name="ctorArgDescriptors"></param>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstance``1(System.Type,System.Collections.Generic.IEnumerable{Cosmos.Reflection.CtorArgDescriptor})">
            <summary>
            Create instance
            </summary>
            <param name="type"></param>
            <param name="ctorArgDescriptors"></param>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.CreateInstance(System.Type,System.Collections.Generic.IEnumerable{Cosmos.Reflection.CtorArgDescriptor})">
            <summary>
            Create instance
            </summary>
            <param name="type"></param>
            <param name="ctorArgDescriptors"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.IsGenericImplementation(System.Type,System.Type)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="type">The given type</param>
            <param name="genericType">The generic type</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.IsGenericImplementation``2">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <typeparam name="TGot">The given type TGot</typeparam>
            <typeparam name="TGeneric">The generic type TGeneric</typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.IsGenericImplementation(System.Type,System.Type,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="type">The given type</param>
            <param name="genericType">The generic type</param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.IsGenericImplementation``2(System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <typeparam name="TGot">The given type TGot</typeparam>
            <typeparam name="TGeneric">The generic type TGeneric</typeparam>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.GetRawTypeFromGenericClass(System.Type,System.Type)">
            <summary>
            Get the original type. <br />
            When type inherits from genericType, gets the first type parameter in the genericType corresponding to the type.
            </summary>
            <param name="type">The given type</param>
            <param name="genericType">The generic type</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.NTypes.GetRawTypeFromGenericClass``2">
            <summary>
            Get the original type. <br />
            When type inherits from genericType, gets the first type parameter in the genericType corresponding to the type.
            </summary>
            <typeparam name="TGot">The given type TGot</typeparam>
            <typeparam name="TGeneric">The generic type TGeneric</typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.CtorArgDescriptor">
            <summary>
            Descriptor of argument
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.CtorArgDescriptor.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.CtorArgDescriptor"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="P:Cosmos.Reflection.CtorArgDescriptor.Name">
            <summary>
            Argument name
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.CtorArgDescriptor.Value">
            <summary>
            Argument value
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.CtorArgDescriptor.Type">
            <summary>
            Argument type
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.CtorMatchedResult">
            <summary>
            Ctor matched result
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.CtorMatchedResult.#ctor(System.Object[],System.Int32)">
            <summary>
            Ctor matched result
            </summary>
            <param name="values"></param>
            <param name="index"></param>
        </member>
        <member name="F:Cosmos.Reflection.CtorMatchedResult.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.CtorMatchedResult.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.ObjectRefCopyExtensions">
            <summary>
            Cosmos object copy extensions
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefCopyExtensions.DeepCopy``1(``0)">
            <summary>
            Deep copy<br />
            深度复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalObj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefCopyExtensions.ExpressionCopy``1(``0)">
            <summary>
            Expression copy<br />
            表达式复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalObj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefCopyExtensions.ExpressionCopyHelper.Copier`1.Copy(`0)">
            <summary>
            Deep copy by expression
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.ObjectRefExtensions">
            <summary>
            Cosmos <see cref="T:System.Object"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefExtensions.CreateTypeAccessor(System.Type)">
            <summary>
            Create TypeAccessor
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefExtensions.CreateTypeAccessor(System.Type,System.Boolean)">
            <summary>
            Create TypeAccessor
            </summary>
            <param name="type"></param>
            <param name="allowNonPublicAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefExtensions.GetHashCode``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Get hashcode
            </summary>
            <param name="x"></param>
            <param name="hashFieldValuesFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.PropertyAccessType">
            <summary>
            Property access type
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.PropertyAccessType.Getters">
            <summary>
            Getters
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.PropertyAccessType.Setters">
            <summary>
            Setters
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.PropertyPath">
            <summary>
            Property path
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.PropertyPath.Root">
            <summary>
            Root
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.PropertyPath.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.PropertyPath.Append(System.Reflection.PropertyInfo)">
            <summary>
            Append
            </summary>
            <param name="property"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.PropertyPath.Of``1">
            <summary>
            Of
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.PropertyPath`1">
            <summary>
            Property path
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Reflection.PropertyPath`1.ThenEnumerable``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Then enumerable
            </summary>
            <param name="expression"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.PropertyPath`1.Then``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Then
            </summary>
            <param name="expression"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Cosmos.Reflection.TypeScanner">
            <summary>
            Type Scanner <br />
            类型扫描器
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeScanner.ScannedResultCache">
            <summary>
            Scanned result cache<br />
            扫描结果缓存
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeScanner.ScannedResultCached">
            <summary>
            Scanned result cached<br />
            标记是否已缓存扫描结果
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
            <param name="scannerName"></param>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor(System.String,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
            <param name="scannerName"></param>
            <param name="baseType"></param>
        </member>
        <member name="P:Cosmos.Reflection.TypeScanner.BaseType">
            <summary>
            Base type <br />
            被扫描的基础类型
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.Scan">
            <summary>
            Scan.<br />
            执行扫描。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.GetAssemblies">
            <summary>
            Get assemblies.<br />
            获取程序集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.GetSkipAssembliesNamespaces">
            <summary>
            Get skip assemblies' namespaces.<br />
            获取需跳过的命名空间清单，清单所列的命名空间内的类型将不会被合并入结果（并缓存）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.GetLimitedAssembliesNamespaces">
            <summary>
            Get limited assemblies' namespaces.<br />
            获取指定命名空间下的类型，未被指定的命名空间内的类型将不会被合并入结果（并缓存）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.TypeFilter">
            <summary>
            Type filter.<br />
            类型过滤器 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.NeedToIgnore(System.Reflection.Assembly)">
            <summary>
            根据 <see cref="M:Cosmos.Reflection.TypeScanner.GetSkipAssembliesNamespaces"/> 和 <see cref="M:Cosmos.Reflection.TypeScanner.GetLimitedAssembliesNamespaces"/> 判别扫描所得的程序集是否符合用户期待。
            如何用户期待的程序集，其类型将进一步交由 <see cref="M:Cosmos.Reflection.TypeScanner.TypeFilter"/> 进行过滤。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.Dispose">
            <summary>
            Dispose<br />
            释放。
            </summary>
        </member>
        <member name="T:DeepCopy.CopierGenerator`1">
            <summary>
            Generates copy delegates.
            </summary>
        </member>
        <member name="M:DeepCopy.CopierGenerator`1.CreateCopier(System.Type)">
            <summary>
            Gets a copier for the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>A copier for the provided type.</returns>
        </member>
        <member name="T:DeepCopy.CopyContext">
            <summary>
            Records details about copied objects.
            </summary>
        </member>
        <member name="M:DeepCopy.CopyContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Records <paramref name="copy"/> as a copy of <paramref name="original"/>.
            </summary>
            <param name="original">The original object.</param>
            <param name="copy">The copy of <paramref name="original"/>.</param>
        </member>
        <member name="M:DeepCopy.CopyContext.TryGetCopy(System.Object,System.Object@)">
            <summary>
            Returns the copy of <paramref name="original"/> if it has been copied or <see langword="null"/> if it has not yet been copied.
            </summary>
            <param name="original">The original object.</param>
            <param name="result">The copied object.</param>
            <returns>The copy of <paramref name="original"/> or <see langword="null"/> if no copy has been made.</returns>
        </member>
        <member name="M:DeepCopy.CopyContext.Reset">
            <summary>
            Resets this instance so that it can be reused.
            </summary>
        </member>
        <member name="T:DeepCopy.CopyPolicy">
            <summary>
            Methods for determining the copyability of types and fields.
            </summary>
        </member>
        <member name="M:DeepCopy.CopyPolicy.GetCopyableFields(System.Type)">
            <summary>
            Returns a sorted list of the copyable fields of the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>A sorted list of the fields of the provided type.</returns>
        </member>
        <member name="M:DeepCopy.CopyPolicy.IsImmutable(System.Type)">
            <summary>
            Returns true if the provided type is immutable, otherwise false.
            </summary>
            <param name="type">The type.</param>
            <returns>true if the provided type is immutable, otherwise false.</returns>
        </member>
        <member name="T:DeepCopy.CopyPolicy.FieldInfoComparer">
            <summary>
            A comparer for <see cref="T:System.Reflection.FieldInfo"/> which compares by name.
            </summary>
        </member>
        <member name="P:DeepCopy.CopyPolicy.FieldInfoComparer.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="M:DeepCopy.CopyPolicy.FieldInfoComparer.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="T:DeepCopy.DeepCopier">
            <summary>
            Methods for creating deep copies of objects.
            </summary>
        </member>
        <member name="M:DeepCopy.DeepCopier.Copy``1(``0)">
            <summary>
            Creates and returns a deep copy of the provided object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="original">The object to copy.</param>
            <returns>A deep copy of the provided object.</returns>
        </member>
        <member name="M:DeepCopy.DeepCopier.Copy``1(``0,DeepCopy.CopyContext)">
            <summary>
            Creates and returns a deep copy of the provided object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="original">The object to copy.</param>
            <param name="context">
            The copy context, providing referential integrity between multiple calls to this method.
            </param>
            <returns>A deep copy of the provided object.</returns>
        </member>
        <member name="T:DeepCopy.DeepCopyDelegate`1">
            <summary>
            Deep copier delegate.
            </summary>
            <param name="original">Original object to be deep copied.</param>
            <param name="context">The context.</param>
            <returns>Deep copy of the original object.</returns>
        </member>
        <member name="T:DeepCopy.Immutable">
            <summary>
            Helper class for creating immutable values.
            </summary>
        </member>
        <member name="M:DeepCopy.Immutable.Create``1(``0)">
            <summary>
            Returns an immutable wrapper over the provided value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value.</param>
            <returns>An immutable wrapper over the provided value.</returns>
        </member>
        <member name="T:DeepCopy.Immutable`1">
            <summary>
            Wrapper class for creating immutable values.
            </summary>
            <typeparam name="T">The wrapped type.</typeparam>
        </member>
        <member name="M:DeepCopy.Immutable`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:DeepCopy.Immutable`1"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:DeepCopy.Immutable`1.Value">
            <summary>
            Gets the value held by this instance.
            </summary>
        </member>
        <member name="T:DeepCopy.ImmutableAttribute">
            <summary>
            The Immutable attribute indicates that instances of the marked class or struct are never modified
            after they are created.
            </summary>
            <remarks>
            Note that this implies that sub-objects are also not modified after the instance is created.
            </remarks>
        </member>
        <member name="T:DeepCopy.MethodInfos">
            <summary>
            Holds references to methods which are used during copying.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.TryGetCopy">
            <summary>
            A reference to the <see cref="M:DeepCopy.CopyContext.TryGetCopy(System.Object,System.Object@)"/> method.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.RecordObject">
            <summary>
            A reference to the <see cref="M:DeepCopy.CopyContext.RecordCopy(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.CopyInner">
            <summary>
            A reference to <see cref="M:DeepCopy.DeepCopier.Copy``1(``0,DeepCopy.CopyContext)"/>
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.GetUninitializedObject">
            <summary>
            A reference to a method which returns an uninitialized object of the provided type.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.GetTypeFromHandle">
            <summary>
            A reference to <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/>.
            </summary>
        </member>
        <member name="T:DeepCopy.ReferenceEqualsComparer">
            <inheritdoc />
        </member>
        <member name="P:DeepCopy.ReferenceEqualsComparer.Instance">
            <summary>
            Gets an instance of this class.
            </summary>
        </member>
        <member name="M:DeepCopy.ReferenceEqualsComparer.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DeepCopy.ReferenceEqualsComparer.System#Collections#Generic#IEqualityComparer{System#Object}#GetHashCode(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Reflection.Emit.SystemModuleBuilderExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.Emit.ModuleBuilder"/> extensions.
            </summary>
        </member>
        <member name="M:System.Reflection.Emit.SystemModuleBuilderExtensions.DefinePOCO(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Define POCO
            </summary>
            <param name="builder"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Emit.SystemModuleBuilderExtensions.DefinePOCO(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
            Define POCO
            </summary>
            <param name="builder"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:System.Reflection.Emit.SystemTypeBuilderExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.Emit.TypeBuilder"/> extensions.
            </summary>
        </member>
        <member name="F:System.Reflection.Emit.SystemTypeBuilderExtensions.PROPERTY_GET_SET_METHOD_ATTRIBUTES">
            <summary>
            Property set and property get methods require a special set of attributes.
            </summary>
        </member>
        <member name="M:System.Reflection.Emit.SystemTypeBuilderExtensions.DefineAutoImplementedProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Define auto implemented property
            </summary>
            <param name="typeBuilder"></param>
            <param name="name"></param>
            <param name="propertyType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.Reflection.SystemAssemblyExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.Assembly"/> extensions
            </summary>
        </member>
        <member name="M:System.Reflection.SystemAssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Get assembly file version.<br />
            获取 Assembly 文件的版本
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemAssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            Get assembly product version.<br />
            获取 Assembly 文件的产品版本 
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Reflection.SystemAssemblyExtensions.GetCliVersion">
            <summary>
            Get CLI version. <br />
            获取 CLI 版本号
            </summary>
        </member>
        <member name="T:System.Reflection.SystemMemberInfoExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.MemberInfo"/> extensions
            </summary>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.IsDefined``1(System.Reflection.MemberInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <typeparam name="TAttribute">要检查的特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.IsDefined``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <typeparam name="TAttribute">要检查的特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.IsNotDefined``1(System.Reflection.MemberInfo)">
            <summary>
            To determine whether the given Attribute is undefined.<br />
            判断给定的特性是否未定义。
            </summary>
            <typeparam name="TAttribute">要检查的特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <returns>是否不存在</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.IsNotDefined``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            To determine whether the given Attribute is undefined.<br />
            判断给定的特性是否未定义。
            </summary>
            <typeparam name="TAttribute">要检查的特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否不存在</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.GetAttributeOrNull``1(System.Reflection.MemberInfo)">
            <summary>
            Get an instance of the specified Attribute type from <see cref="T:System.Reflection.MemberInfo"/>.<br />
            从 <see cref="T:System.Reflection.MemberInfo"/> 中获取指定 Attribute 类型的实例。
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.GetAttributeOrNull``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Get an instance of the specified Attribute type from <see cref="T:System.Reflection.MemberInfo"/>.<br />
            从 <see cref="T:System.Reflection.MemberInfo"/> 中获取指定 Attribute 类型的实例。
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="info">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.TryGetAttribute``1(System.Reflection.MemberInfo,``0@)">
            <summary>
            Try to get an instance of the specified Attribute type from <see cref="T:System.Reflection.MemberInfo"/>.<br />
            尝试从 <see cref="T:System.Reflection.MemberInfo"/> 中获取指定 Attribute 类型的实例。
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="info"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.TryGetAttribute``1(System.Reflection.MemberInfo,System.Boolean,``0@)">
            <summary>
            Try to get an instance of the specified Attribute type from <see cref="T:System.Reflection.MemberInfo"/>.<br />
            尝试从 <see cref="T:System.Reflection.MemberInfo"/> 中获取指定 Attribute 类型的实例。
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="info">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <param name="attribute"></param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Get all instances of the specified Attribute type from <see cref="T:System.Reflection.MemberInfo"/>.<br />
            从 <see cref="T:System.Reflection.MemberInfo"/> 中获取指定 Attribute 类型的所有实例。
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Get all instances of the specified Attribute type from <see cref="T:System.Reflection.MemberInfo"/>.<br />
            从 <see cref="T:System.Reflection.MemberInfo"/> 中获取指定 Attribute 类型的所有实例。
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="info">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回 null</returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.GetAttributeOfTypeOrBaseTypeOrNull``1(System.Type,System.Boolean)">
            <summary>
            Get an instance of the specified Attribute type from <see cref="T:System.Type"/> or its base type.<br />
            从 <see cref="T:System.Type"/> 或其基类中获取指定 Attribute 类型的实例。
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMemberInfoExtensions.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Get property value from the given instance.
            </summary>
            <param name="member"></param>
            <param name="instance"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.Reflection.SystemMethodInfoExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.MethodInfo"/> extensions.
            </summary>
        </member>
        <member name="M:System.Reflection.SystemMethodInfoExtensions.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            Get full name of method including type name and method name.<br />
            获取方法的全名，包括类型名和方法名
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMethodInfoExtensions.GetFullyQualifiedName(System.Reflection.MethodInfo)">
            <summary>
            Get unique fully qualified name for <see cref="T:System.Reflection.MethodInfo"/>.<br />
            获取给定 <see cref="T:System.Reflection.MethodInfo"/> 的完全限定名。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMethodInfoExtensions.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Determine whether the specified method is an asynchronous method.<br />
            判断指定的方法是否为异步方法。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemMethodInfoExtensions.IsOverridden(System.Reflection.MethodInfo)">
            <summary>
            Determine whether the specified method is an overriding method.<br />
            判断指定方法是否是重写方法
            </summary>
            <param name="method">要判断的方法信息</param>
            <returns>是否是重写方法</returns>
        </member>
        <member name="T:System.Reflection.SystemPropertyInfoExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.PropertyInfo"/> extensions.
            </summary>
        </member>
        <member name="M:System.Reflection.SystemPropertyInfoExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemPropertyInfoExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemPropertyInfoExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemPropertyInfoExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Reflection.SystemPropertyInfoExtensions.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Get the Attribute of the specified type from the given PropertyInfo. <br />
            从给定的 PropertyInfo 中获取指定类型的 Attribute。
            </summary>
            <param name="propertyInfo"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemPropertyInfoExtensions.IsVirtual(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether the specified property is an virtual property.<br />
            判断指定属性是否是虚属性。
            </summary>
        </member>
        <member name="T:System.Reflection.SystemTypeExtensions">
            <summary>
            Cosmos <see cref="T:System.Type"/> extensions
            </summary>
            <summary>
            Cosmos <see cref="T:System.Type"/> extensions
            </summary>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.ToNonNullableType(System.Type)">
            <summary>
            Get a non-nullable underlying version of a given <see cref="T:System.Type"/>.<br />
            获取给定类型的非空版本。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)">
            <summary>
            Get that's <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/><br />
            获取给定对象的 <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/>。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.ToTypeInfo(System.Type[])">
            <summary>
            Convert <see cref="T:System.Type"/> array to <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/> list.<br />
            将给定的 <see cref="T:System.Type"/> 数组转换为 <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/> 列表。
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetAttribute``1(System.Type)">
            <summary>
            Get the Attribute of the specified type from the given Type. <br />
            从给定的 Type 中获取指定类型的 Attribute。
            </summary>
            <param name="fromType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetProperties(System.Type,Cosmos.Reflection.PropertyAccessType)">
            <summary>
            Get all properties from the given Type.<br />
            从给定的 Type 中获得所有属性。
            </summary>
            <param name="type"></param>
            <param name="accessType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetProperties``1(Cosmos.Reflection.PropertyAccessType)">
            <summary>
            Get all properties from the given Type.<br />
            从给定的 Type 中获得所有属性。
            </summary>
            <param name="accessType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the value of the specified property name from the that.<br />
            从对象中获取指定属性名称的值。
            </summary>
            <param name="that">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this that</param>
            <returns>Value of the specific property in this that</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the value of the specified property name from the that.<br />
            从对象中获取指定属性名称的值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Get the value of the specified property name from the that.<br />
            从对象中获取指定属性名称的值。
            </summary>
            <param name="that">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this that</param>
            <returns>Value of the specific property in this that</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the value of the specified property name from the that.<br />
            从对象中获取指定属性名称的值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TryGetPropertyValue(System.Object,System.String,System.Object@)">
            <summary>
            Try to get the value of the specified property name from the that.<br />
            尝试从对象中获取指定属性名称的值。
            </summary>
            <param name="that">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this that</param>
            <param name="value"></param>
            <returns>Value of the specific property in this that</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TryGetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object@)">
            <summary>
            Try to get the value of the specified property name from the that.<br />
            尝试从对象中获取指定属性名称的值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TryGetPropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            Try to get the value of the specified property name from the that.<br />
            尝试从对象中获取指定属性名称的值。
            </summary>
            <param name="that">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this that</param>
            <param name="value"></param>
            <returns>Value of the specific property in this that</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TryGetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags,``0@)">
            <summary>
            Try to get the value of the specified property name from the that.<br />
            尝试从对象中获取指定属性名称的值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Set a value to the specified property name in the that.<br />
            向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.SetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Set a value to the specified property name in the that.<br />
            向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Set a value to the specified property name in the that.<br />
            向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.SetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags,``0)">
            <summary>
            Set a value to the specified property name in the that.<br />
            向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TrySetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Try to set a value to the specified property name in the that.<br />
            尝试向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TrySetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Try to set a value to the specified property name in the that.<br />
            尝试向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TrySetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Try to set a value to the specified property name in the that.<br />
            尝试向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.TrySetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags,``0)">
            <summary>
            Try to set a value to the specified property name in the that.<br />
            尝试向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetPropertyValueQuickly(System.Object,System.Type,System.String,System.Boolean)">
            <summary>
            Get the value of the specified property name from the that.<br />
            从对象中获取指定属性名称的值。
            </summary>
            <param name="type"></param>
            <param name="that">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this that</param>
            <param name="allowNonPublicAccessors"></param>
            <returns>Value of the specific property in this that</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetPropertyValueQuickly``1(System.Object,System.String,System.Boolean)">
            <summary>
            Get the value of the specified property name from the that.<br />
            从对象中获取指定属性名称的值。
            </summary>
            <param name="that">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this that</param>
            <param name="allowNonPublicAccessors"></param>
            <returns>Value of the specific property in this that</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.SetPropertyValueQuickly(System.Object,System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Set a value to the specified property name in the that.<br />
            向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="allowNonPublicAccessors"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.SetPropertyValueQuickly``1(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Set a value to the specified property name in the that.<br />
            向对象中的指定属性名称设置值。
            </summary>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="allowNonPublicAccessors"></param>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.FindGenericTypeInfo(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            Find <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/> from the given type's parameters' type
            </summary>
            <param name="definition"></param>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.FindGenericType(System.Type,System.Type)">
            <summary>
            Find <see cref="T:System.Type"/> from the given type's parameters' type<br />
            </summary>
            <param name="definition"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetFullyQualifiedName(System.Reflection.TypeInfo)">
            <summary>
            Get unique fully qualified name for <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/>.<br />
            获取给定 <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/> 的完全限定名。
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.GetFullyQualifiedName(System.Type)">
            <summary>
            Get unique fully qualified name for <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/>.<br />
            获取给定 <see cref="M:System.Reflection.SystemTypeExtensions.TypeInfo(System.Object)"/> 的完全限定名。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsObjectDeriveFrom``1(System.Object)">
            <summary>
            Determine whether the current Type (HereGivenType) is derived from the given class ThereType,
            or is an implementation of the interface ThereType.<br />
            判断当前 Type 是否派生自给定的类 ThereType，或为接口 ThereType 的实现。
            </summary>
            <typeparam name="TThereBaseClazz"></typeparam>
            <param name="hereGivenObj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsObjectDeriveFrom(System.Object,System.Type)">
            <summary>
            Determine whether the current Type (HereGivenType) is derived from the given class ThereType,
            or is an implementation of the interface ThereType.<br />
            判断当前 Type 是否派生自给定的类 ThereType，或为接口 ThereType 的实现。
            </summary>
            <param name="hereGivenObj"></param>
            <param name="thereBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsDeriveClassFrom(System.Type,System.Type,System.Boolean)">
            <summary>
            Determine whether the current Type (HereGivenType) is derived from the given class ThereBaseType,
            or is an implementation of the interface ThereType.<br />
            判断当前 Type 是否派生自给定的类 ThereType，或为接口 ThereType 的实现。
            </summary>
            <param name="hereGivenType"></param>
            <param name="thereBaseType"></param>
            <param name="canAbstract"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsDeriveClassFrom``1(System.Type,System.Boolean)">
            <summary>
            Determine whether the current Type (HereGivenType) is derived from the given class ThereBaseType,
            or is an implementation of the interface ThereType.<br />
            判断当前 Type 是否派生自给定的类 ThereType，或为接口 ThereType 的实现。
            </summary>
            <param name="hereGivenType"></param>
            <param name="canAbstract"></param>
            <typeparam name="TBaseType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            Determine whether the current HereGivenType is derived from the generic class thereGenericType
            or is an implementation of the generic interface thereGenericType. <br />
            判断当前类型 HereGivenType 是否派生自泛型类 thereGenericType，或为泛型接口 thereGenericType 的实现。
            </summary>
            <param name="genericBaseType"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsGenericImplementationFor(System.Type,System.Type)">
            <summary>
            Determine whether the current HereGivenType is derived from the generic class thereGenericType
            or is an implementation of the generic interface thereGenericType. <br />
            判断当前类型 HereGivenType 是否派生自泛型类 thereGenericType，或为泛型接口 thereGenericType 的实现。
            </summary>
            <param name="hereGivenType">给定类型</param>
            <param name="thereGenericType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsGenericImplementationFor(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            Determine whether the current HereGivenType is derived from the generic class thereGenericType
            or is an implementation of the generic interface thereGenericType. <br />
            判断当前类型 HereGivenType 是否派生自泛型类 thereGenericType，或为泛型接口 thereGenericType 的实现。
            </summary>
            <param name="hereGivenType">给定类型</param>
            <param name="thereGenericType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsGenericImplementationFor``1(System.Type)">
            <summary>
            Determine whether the current HereGivenType is derived from the generic class thereGenericType
            or is an implementation of the generic interface thereGenericType. <br />
            判断当前类型 HereGivenType 是否派生自泛型类 thereGenericType，或为泛型接口 thereGenericType 的实现。
            </summary>
            <typeparam name="TGeneric">泛型类型</typeparam>
            <param name="hereGivenType">给定类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsGenericImplementationFor``1(System.Reflection.TypeInfo)">
            <summary>
            Determine whether the current HereGivenType is derived from the generic class thereGenericType
            or is an implementation of the generic interface thereGenericType. <br />
            判断当前类型 HereGivenType 是否派生自泛型类 thereGenericType，或为泛型接口 thereGenericType 的实现。
            </summary>
            <typeparam name="TThereGenericClazz">泛型类型</typeparam>
            <param name="hereGivenType">给定类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            Determine whether the specified type is a derived class of the given base class.<br />
            判断制定类型是否是给定基类的派生类。
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsBaseOn``1(System.Type)">
            <summary>
            Determine whether the specified type is a derived class of the given base class.<br />
            判断制定类型是否是给定基类的派生类。
            </summary>
            <param name="type"></param>
            <typeparam name="TBaseType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsNumeric(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="type">要检查的类型</param>
            <param name="options"></param>
            <returns>是否是数值类型</returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determine whether the specified type is a collection type. <br />
            判断指定的类型是否为集合类型。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsTupleType(System.Type,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="type"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsDefined``1(System.Type)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsDefined``1(System.Type,System.Boolean)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsDefined(System.Type,System.Type)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsDefined(System.Type,System.Type,System.Boolean)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsNotDefined``1(System.Type)">
            <summary>
            Determine whether the specified type does NOT define the specified Attribute.<br />
            判断指定类型是否未定义指定特性。
            </summary>
            <param name="type"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.IsNotDefined(System.Type,System.Type)">
            <summary>
            Determine whether the specified type does NOT define the specified Attribute.<br />
            判断指定类型是否未定义指定特性。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasAttribute``1(System.Type)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <param name="type"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <param name="type"></param>
            <param name="inherit"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasAttribute(System.Type,System.Type)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Determine whether the specified type defines the specified Attribute.<br />
            判断指定类型是否定义了指定的特性。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasNotAttribute``1(System.Type)">
            <summary>
            Determine whether the specified type does NOT define the specified Attribute.<br />
            判断指定类型是否未定义指定特性。
            </summary>
            <param name="type"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasNotAttribute(System.Type,System.Type)">
            <summary>
            Determine whether the specified type does NOT define the specified Attribute.<br />
            判断指定类型是否未定义指定特性。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasInterface``1(System.Type)">
            <summary>
            Determine whether the specified type defines the specified interface.<br />
            判断指定类型是否定义了指定接口。
            </summary>
            <param name="type"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasInterface(System.Type,System.Type)">
            <summary>
            Determine whether the specified type defines the specified interface.<br />
            判断指定类型是否定义了指定接口。
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasNotInterface``1(System.Type)">
            <summary>
            Determine whether the specified type does NOT define the specified interface.<br />
            判断指定类型是否未定义指定接口
            </summary>
            <param name="type"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Reflection.SystemTypeExtensions.HasNotInterface(System.Type,System.Type)">
            <summary>
            Determine whether the specified type does NOT define the specified interface.<br />
            判断指定类型是否未定义指定接口
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
    </members>
</doc>
