<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions</name>
    </assembly>
    <members>
        <member name="T:Cosmos.CaseFormat">
            <summary>
            Case format<br />
            大小写格式化器
            </summary>
        </member>
        <member name="M:Cosmos.CaseFormat.To(Cosmos.CaseFormat.Style,System.String)">
            <summary>
            To<br />
            转换
            </summary>
            <param name="style"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CaseFormat.To(Humanizer.IStringTransformer,System.String,System.String)">
            <summary>
            To<br />
            转换
            </summary>
            <param name="transformer"></param>
            <param name="sequence"></param>
            <param name="joinOnStr"></param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.CaseFormat.LowerHyphen">
            <summary>
            Create a <see cref="T:Cosmos.CaseFormat"/> instance with a hyphen splitter.
            </summary>
        </member>
        <member name="P:Cosmos.CaseFormat.LowerUnderscore">
            <summary>
            Create a <see cref="T:Cosmos.CaseFormat"/> instance with a lower underscore splitter.
            </summary>
        </member>
        <member name="P:Cosmos.CaseFormat.UpperUnderscore">
            <summary>
            Create a <see cref="T:Cosmos.CaseFormat"/> instance with a upper underscore splitter.
            </summary>
        </member>
        <member name="P:Cosmos.CaseFormat.Instance">
            <summary>
            Create a <see cref="T:Cosmos.CaseFormat"/> instance with a normal splitter.
            </summary>
        </member>
        <member name="P:Cosmos.CaseFormat.Humanizer">
            <summary>
            Create a <see cref="T:Cosmos.CaseFormat"/> instance in humanizer mode.
            </summary>
        </member>
        <member name="T:Cosmos.CaseFormat.Style">
            <summary>
            Case format style<be />
            大小写格式化样式
            </summary>
        </member>
        <member name="F:Cosmos.CaseFormat.Style.LOWER_CAMEL">
            <summary>
            Lower camel<br />
            小写与驼峰
            </summary>
        </member>
        <member name="F:Cosmos.CaseFormat.Style.LOWER_HYPHEN">
            <summary>
            Lower hyphen<br />
            小写与横线
            </summary>
        </member>
        <member name="F:Cosmos.CaseFormat.Style.LOWER_UNDERSCORE">
            <summary>
            Lower underscore<br />
            小写与下划线
            </summary>
        </member>
        <member name="F:Cosmos.CaseFormat.Style.UPPER_CAMEL">
            <summary>
            Upper camel<br />
            大写与驼峰
            </summary>
        </member>
        <member name="F:Cosmos.CaseFormat.Style.UPPER_UNDERSCORE">
            <summary>
            Upper underscore<br />
            大写与下划线
            </summary>
        </member>
        <member name="T:Cosmos.CharMatchers.CharMatcher">
            <summary>
            Char matcher
            </summary>
            <summary>
            Char matcher
            </summary>
            <summary>
            Char matcher
            </summary>
            <summary>
            Char matcher
            </summary>
            <summary>
            Char matcher
            </summary>
        </member>
        <member name="M:Cosmos.CharMatchers.CharMatcher.Is(System.Char)">
            <summary>
            Is
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.CharMatcher.IsNot(System.Char)">
            <summary>
            Is not
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.CharMatcher.AnyOf(System.String)">
            <summary>
            Any of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.CharMatcher.NoneOf(System.String)">
            <summary>
            None of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.CharMatchers.CharMatcher.WHITESPACE">
            <summary>
            Whitespace
            </summary>
        </member>
        <member name="T:Cosmos.CharMatchers.IAnyOfModeCharMatcher">
            <summary>
            Interface to flag 'AnyOf' mode of char matcher
            </summary>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.Negate">
            <summary>
            Negate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.InRange(System.Char,System.Char)">
            <summary>
            In range
            </summary>
            <param name="startInclusive"></param>
            <param name="endInclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.ForPredicate(System.Func{System.Char,System.Boolean})">
            <summary>
            for predicate
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.MatchesAnyOf(System.String)">
            <summary>
            Matches any of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.MatchesAllOf(System.String)">
            <summary>
            Matches all of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.MatchesNoneOf(System.String)">
            <summary>
            Matches none of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.IndexIn(System.String)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.IndexIn(System.String,System.Int32)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.LastIndexIn(System.String)">
            <summary>
            Last index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.CountIn(System.String)">
            <summary>
            Count in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.RemoveFrom(System.String)">
            <summary>
            Remove from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.RetainFrom(System.String)">
            <summary>
            Retain from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.ReplaceFrom(System.String,System.Char)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.ReplaceFrom(System.String,System.String)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.TrimFrom(System.String)">
            <summary>
            Trim from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.TrimLeadingForm(System.String)">
            <summary>
            Trim leading from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.TrimTrailingFrom(System.String)">
            <summary>
            Trim trailing from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.CollapseFrom(System.String,System.Char)">
            <summary>
            Collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.TrimAndCollapseFrom(System.String,System.Char)">
            <summary>
            Trim and collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IAnyOfModeCharMatcher.Apply(System.Char)">
            <summary>
            Apply
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.CharMatchers.ICharMatcher">
            <summary>
            Interface for char matcher
            </summary>
        </member>
        <member name="T:Cosmos.CharMatchers.IIsModeCharMatcher">
            <summary>
            Interface to flag 'Is' mode of char matcher
            </summary>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.Negate">
            <summary>
            Negate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.InRange(System.Char,System.Char)">
            <summary>
            In range
            </summary>
            <param name="startInclusive"></param>
            <param name="endInclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.ForPredicate(System.Func{System.Char,System.Boolean})">
            <summary>
            For predicate
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.MatchesAnyOf(System.String)">
            <summary>
            Matches any of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.MatchesAllOf(System.String)">
            <summary>
            Matches all of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.MatchesNoneOf(System.String)">
            <summary>
            Matches none of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.IndexIn(System.String)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.IndexIn(System.String,System.Int32)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.LastIndexIn(System.String)">
            <summary>
            Last index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.CountIn(System.String)">
            <summary>
            Count in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.RemoveFrom(System.String)">
            <summary>
            Remove from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.RetainFrom(System.String)">
            <summary>
            Retain from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.ReplaceFrom(System.String,System.Char)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.ReplaceFrom(System.String,System.String)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.TrimFrom(System.String)">
            <summary>
            Trim from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.TrimLeadingForm(System.String)">
            <summary>
            Trim leading from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.TrimTrailingFrom(System.String)">
            <summary>
            Trim trailing from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.CollapseFrom(System.String,System.Char)">
            <summary>
            Collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.TrimAndCollapseFrom(System.String,System.Char)">
            <summary>
            Trim and collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsModeCharMatcher.Apply(System.Char)">
            <summary>
            Apply
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.CharMatchers.IIsNotModeCharMatcher">
            <summary>
            Interface to flag 'Not' mode of char matcher
            </summary>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.Negate">
            <summary>
            Negate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.InRange(System.Char,System.Char)">
            <summary>
            In range
            </summary>
            <param name="startInclusive"></param>
            <param name="endInclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.ForPredicate(System.Func{System.Char,System.Boolean})">
            <summary>
            For predicate
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.MatchesAnyOf(System.String)">
            <summary>
            Matches any of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.MatchesAllOf(System.String)">
            <summary>
            Matches all of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.MatchesNoneOf(System.String)">
            <summary>
            Matches none of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.IndexIn(System.String)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.IndexIn(System.String,System.Int32)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.LastIndexIn(System.String)">
            <summary>
            Last index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.CountIn(System.String)">
            <summary>
            Count in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.RemoveFrom(System.String)">
            <summary>
            Remove from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.RetainFrom(System.String)">
            <summary>
            Retain from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.ReplaceFrom(System.String,System.Char)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.ReplaceFrom(System.String,System.String)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.TrimFrom(System.String)">
            <summary>
            Trim from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.TrimLeadingForm(System.String)">
            <summary>
            Trim trailing from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.TrimTrailingFrom(System.String)">
            <summary>
            Trim trailing from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.CollapseFrom(System.String,System.Char)">
            <summary>
            Collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.TrimAndCollapseFrom(System.String,System.Char)">
            <summary>
            Trim and collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.IIsNotModeCharMatcher.Apply(System.Char)">
            <summary>
            Apply
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.CharMatchers.INoneOfModeCharMatcher">
            <summary>
            Interface to flag 'None' mode of char matcher
            </summary>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.Negate">
            <summary>
            Negate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.InRange(System.Char,System.Char)">
            <summary>
            In range
            </summary>
            <param name="startInclusive"></param>
            <param name="endInclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.ForPredicate(System.Func{System.Char,System.Boolean})">
            <summary>
            For predicate
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.MatchesAnyOf(System.String)">
            <summary>
            Matches any of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.MatchesAllOf(System.String)">
            <summary>
            Matches all of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.MatchesNoneOf(System.String)">
            <summary>
            Matches none of
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.IndexIn(System.String)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.IndexIn(System.String,System.Int32)">
            <summary>
            Index in
            </summary>
            <param name="sequence"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.LastIndexIn(System.String)">
            <summary>
            Last index in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.CountIn(System.String)">
            <summary>
            Count in
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.RemoveFrom(System.String)">
            <summary>
            Remove from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.RetainFrom(System.String)">
            <summary>
            Retain from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.ReplaceFrom(System.String,System.Char)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.ReplaceFrom(System.String,System.String)">
            <summary>
            Replace from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.TrimFrom(System.String)">
            <summary>
            Trim from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.TrimLeadingForm(System.String)">
            <summary>
            Trim leading from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.TrimTrailingFrom(System.String)">
            <summary>
            Trim trailing from
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.CollapseFrom(System.String,System.Char)">
            <summary>
            Collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.TrimAndCollapseFrom(System.String,System.Char)">
            <summary>
            Trim and collapse from
            </summary>
            <param name="sequence"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharMatchers.INoneOfModeCharMatcher.Apply(System.Char)">
            <summary>
            Apply
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.CastingContext">
            <summary>
            Casting context
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.IgnoreCase">
            <summary>
            Ignore case
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.NumberStyles">
            <summary>
            Number styles
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.DateTimeStyles">
            <summary>
            DateTime styles
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.DateTimeFormatStyles">
            <summary>
            DateTime target types
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.GuidFormatStyles">
            <summary>
            Guid format styles
            </summary>
        </member>
        <member name="P:Cosmos.Conversions.CastingContext.FormatProvider">
            <summary>
            Format provider
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.DateTimeFormatStyles">
            <summary>
            Datetime target types
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.LongDate">
            <summary>
            LongDate
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.LongTime">
            <summary>
            LongTime
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.ShortDate">
            <summary>
            ShortDate
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.ShortTime">
            <summary>
            ShortTime
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.Local">
            <summary>
            LocalTime
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.DateTimeFormatStyles.Universal">
            <summary>
            UniversalTime
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.GuidFormatStyles">
            <summary>
            Guid format styles
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.GuidFormatStyles.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.GuidFormatStyles.D">
            <summary>
            D
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.GuidFormatStyles.N">
            <summary>
            N
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.GuidFormatStyles.P">
            <summary>
            P
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.IgnoreCase">
            <summary>
            Ignore case
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.IgnoreCase.TRUE">
            <summary>
            True
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.IgnoreCase.FALSE">
            <summary>
            False
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.ScaleStyles">
            <summary>
            Scale styles
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.ScaleStyles.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.ScaleStyles.Binary">
            <summary>
            Binary
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.ScaleStyles.Decimalism">
            <summary>
            Decimalism
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.ScaleStyles.Hexadecimal">
            <summary>
            Hexadecimal
            </summary>
        </member>
        <member name="F:Cosmos.Conversions.ScaleStyles.Others">
            <summary>
            Others
            </summary>
        </member>
        <member name="T:Cosmos.EqualityHelper`1">
            <summary>
            相等比较，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper[Person].CreateComparer(p => p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p => p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p => p.Birthday.Year);
            </example>
        </member>
        <member name="M:Cosmos.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            Create comparer
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create comparer
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="T:Cosmos.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化谓词表达式生成器
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Cosmos.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.Append(System.String,Cosmos.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
        </member>
        <member name="T:Cosmos.Expressions.ExpressionExtensions">
            <summary>
            Expression extensions
            </summary>
            <summary>
            Expression extensions
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get PropertyInfo
            </summary>
            <param name="expression"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get PropertyInfo
            </summary>
            <param name="source"></param>
            <param name="expression"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.GetPropertyInfos``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Get PropertyInfos
            </summary>
            <param name="source"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.GetPropertyInfos``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Get PropertyInfos
            </summary>
            <param name="source"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.GetPropertyInfos``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Get PropertyInfos
            </summary>
            <param name="expressions"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyExpression(System.Reflection.PropertyInfo)">
            <summary>
            Create get property expression
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyExpression(System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create get property expression
            </summary>
            <param name="propertyInfo"></param>
            <param name="parameterExpression"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyLambdaExpression``2(System.Reflection.PropertyInfo)">
            <summary>
            Create get property lambda expression
            </summary>
            <param name="propertyInfo"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyLambdaExpression``2(System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create get property lambda expression
            </summary>
            <param name="propertyInfo"></param>
            <param name="parameterExpression"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.CharExtensions">
            <summary>
            Char extensions
            </summary>
        </member>
        <member name="M:Cosmos.CharExtensions.IsBetween(System.Char,System.Char,System.Char)">
            <summary>
            Is special char between min and max
            </summary>
            <param name="char"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharExtensions.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            Equals ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharExtensions.EqualsIgnoreCase(System.Nullable{System.Char},System.Char)">
            <summary>
            Equals ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CharExtensions.To(System.Char,System.Char)">
            <summary>
            To create a range from one to another
            </summary>
            <param name="this"></param>
            <param name="toCharacter"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.CollectionExtensions">
            <summary>
            Collection extensions
            </summary>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Add range
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="collection"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.Disorder``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            打乱一个集合的顺序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join to string
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Join to string
            </summary>
            <param name="list"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean},System.Func{System.String,System.String})">
            <summary>
            Join to string
            </summary>
            <param name="list"></param>
            <param name="predicate"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String})">
            <summary>
            Join to string
            </summary>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="predicate"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="predicate"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String,Cosmos.ITypeConverter{``0,System.String},System.Func{``0,``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="converter"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Func{``0,``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="to"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Cosmos.ITypeConverter{``0,System.String},System.Func{``0,``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="predicate"></param>
            <param name="converter"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinOnePerLine``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToStringFormat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToStringFormat``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToStringFormat``1(System.Collections.Generic.IEnumerable{``0},System.String,System.IFormatProvider)">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.CollectionExtensions.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.Func{``0,System.String},System.Func{``0,``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="predicate"></param>
            <param name="to"></param>
            <param name="replaceFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.BaseTypeExtensions">
            <summary>
            DateTime Extensions
            </summary>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>
            If true...
            </summary>
            <param name="this"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IfFalse(System.Boolean,System.Action)">
            <summary>
            If false...
            </summary>
            <param name="this"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.Ifttt(System.Boolean,System.Action,System.Action)">
            <summary>
            If this then that...
            </summary>
            <param name="condition"></param>
            <param name="this"></param>
            <param name="that"></param>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.Ifttt``1(System.Boolean,System.Func{``0},System.Func{``0})">
            <summary>
            If this then that...
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="condition"></param>
            <param name="this"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.ToBinary(System.Boolean)">
            <summary>
            Is binary
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.ToString(System.Boolean,System.String,System.String)">
            <summary>
            If true then this, else that...
            </summary>
            <param name="this"></param>
            <param name="trueString"></param>
            <param name="falseString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IfNullOrWhiteSpace(System.String,System.Action)">
            <summary>
            If null or whitespace then...
            </summary>
            <param name="string"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IfNotNullNorSpace(System.String,System.Action)">
            <summary>
            If not null nor whitespace then...
            </summary>
            <param name="string"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            获得本月的总天数
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获得下一个工作日
            </summary>
            <param name="date"></param>
            <param name="weekday"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetPreviousWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获得上一个工作日
            </summary>
            <param name="date">   </param>
            <param name="weekday"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            获得两个时间的间隔
            </summary>
            <param name="fecha"></param>
            <param name="endFecha">  </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            获得本月第一天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获得本月第一个周几的日期
            </summary>
            <param name="date">     </param>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            获得本月最后一天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获得本月最后一个指定的星期几
            </summary>
            <param name="date">     </param>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            获得本周第一天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获得本周第一天
            </summary>
            <param name="date">       </param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            获得本周最后一天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获得本周最后一天
            </summary>
            <param name="date">       </param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获得本周第一个工作日
            </summary>
            <param name="date">   </param>
            <param name="weekday"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetWeekday(System.DateTime,System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            获得本周第一个工作日
            </summary>
            <param name="date">       </param>
            <param name="weekday">    </param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetMonthDiff(System.DateTime,System.DateTime)">
            <summary>
            Compute dateTime difference
            </summary>
            <param name="dt1"></param>
            <param name="dt2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetTotalMonthDiff(System.DateTime,System.DateTime)">
            <summary>
            Compute dateTime difference precisely
            </summary>
            <param name="dt1"></param>
            <param name="dt2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetWeekOfYear(System.DateTime)">
            <summary>
            获得指定日期所在的周是第几周
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            获得指定日期所在的周是第几周
            </summary>
            <param name="datetime"></param>
            <param name="weekrule"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetWeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            获得指定日期所在的周是第几周
            </summary>
            <param name="datetime"></param>
            <param name="firstDayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            获得指定日期所在的周是第几周
            </summary>
            <param name="datetime"></param>
            <param name="weekrule"></param>
            <param name="firstDayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetEndOfDay(System.DateTime)">
            <summary>
            获取当前最后时间（即当天的 23:59:59:999）
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetEndOfMonth(System.DateTime)">
            <summary>
            获取当月最后时间（当月最后一天的 23:59:59.999）
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetEndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            获取当周最后时间（当周最后一天的 23:59:59.999）
            </summary>
            <param name="dt"></param>
            <param name="startDayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.GetEndOfYear(System.DateTime)">
            <summary>
            获取当年最后时间（当年最后一天的 23:59:59.999）
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.ToEpochTimeSpan(System.DateTime)">
            <summary>
            转换为 Epoch time span
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.Tomorrow(System.DateTime)">
            <summary>
            获得明天
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.Yesterday(System.DateTime)">
            <summary>
            获取昨天
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set time
            </summary>
            <param name="originalDate"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetHour(System.DateTime,System.Int32)">
            <summary>
            Set hour
            </summary>
            <param name="originalDate"></param>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetMinute(System.DateTime,System.Int32)">
            <summary>
            Set minute
            </summary>
            <param name="originalDate"></param>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetSecond(System.DateTime,System.Int32)">
            <summary>
            Set second
            </summary>
            <param name="originalDate"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetDate(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set date
            </summary>
            <param name="value"></param>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetYear(System.DateTime,System.Int32)">
            <summary>
            Set year
            </summary>
            <param name="value"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetMonth(System.DateTime,System.Int32)">
            <summary>
            Set month
            </summary>
            <param name="value"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.SetDay(System.DateTime,System.Int32)">
            <summary>
            Set day
            </summary>
            <param name="value"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsToday(System.DateTime)">
            <summary>
            判断指定日期是否为今天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsToday(System.Nullable{System.DateTime})">
            <summary>
            判断指定日期是否为今天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsToday(System.DateTimeOffset)">
            <summary>
            判断指定
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsToday(System.Nullable{System.DateTimeOffset})">
            <summary>
            判断指定
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsWeekday(System.DateTime)">
            <summary>
            判断是否为工作日
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsWeekday(System.Nullable{System.DateTime})">
            <summary>
            判断是否为工作日
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsWeekend(System.DateTime)">
            <summary>
            判断是否为周末
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsWeekend(System.Nullable{System.DateTime})">
            <summary>
            判断是否为周末
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsValid(System.DateTime)">
            <summary>
            判断时间是否合法
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsMorning(System.DateTime)">
            <summary>
            判断是否为上午
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsAfternoon(System.DateTime)">
            <summary>
            判断是否为下午
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsFuture(System.DateTime)">
            <summary>
            判断是否是未来
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsPast(System.DateTime)">
            <summary>
            判断是否为过去
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
            判断两天的日期是否相同
            </summary>
            <param name="date"></param>
            <param name="dateToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsTimeEqual(System.DateTime,System.DateTime)">
            <summary>
            判断两个时间是否相同
            </summary>
            <param name="time"></param>
            <param name="timeToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="M:Cosmos.BaseTypeExtensions.IsNullOrEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="T:Cosmos.StringExtensions">
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
            <summary>
            String extensions
            </summary>
        </member>
        <member name="M:Cosmos.StringExtensions.Fill(System.String,System.Object[])">
            <summary>
            Fill
            </summary>
            <param name="original"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EnumerateLines(System.String)">
            <summary>
            Enumerate lines
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ToValidIdentifier(System.String)">
            <summary>
            To valid identifier
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.UseAsSeparatorFor``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Use As Separator For
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.AvoidNull(System.String)">
            <summary>
            Avoid null
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeat
            </summary>
            <param name="text"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ExtractAround(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract around
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.OnlyLettersNumbers(System.String)">
            <summary>
            Only letters numbers
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.FilterChars(System.String,System.Predicate{System.Char})">
            <summary>
            Filter chars
            </summary>
            <param name="text"></param>
            <param name="onlyThese"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SafeGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            To safe group value
            </summary>
            <param name="match"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Is``1(System.String,Cosmos.Conversions.IgnoreCase,System.Action{``0},System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Is
            </summary>
            <param name="str"></param>
            <param name="action"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="formatProvider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Is``1(System.String,System.Action{``0})">
            <summary>
            Is
            </summary>
            <param name="str"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Is(System.String,System.Type,Cosmos.Conversions.IgnoreCase,System.Action{System.Object},System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Is
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="action"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="provider"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNullable``1(System.String,System.Action{``0},System.Action,System.Boolean,System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Is nullable
            </summary>
            <param name="s"></param>
            <param name="action"></param>
            <param name="isNullAction"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="provider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNullable(System.String,System.Type,System.Action{System.Object},System.Action,System.Boolean,System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Is nullable
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="action"></param>
            <param name="isNullAction"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            检查字符串是 null 还是 System.String.Empty 字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNotNullNorEmpty(System.String)">
            <summary>
            检查字符串不是 null 或 System.String.Empty 字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            检查字符串是 null、空还是仅由空白字符组成
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNotNullNorWhiteSpace(System.String)">
            <summary>
            检查字符串不是 null、空或由空白字符串组成
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsChar(System.String)">
            <summary>
            Is char
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsBoolean(System.String)">
            <summary>
            Is boolean
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsEncoding(System.String)">
            <summary>
            Is encoding
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsWebUrl(System.String)">
            <summary>
            判断是否为 Url 路径
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsEmail(System.String)">
            <summary>
            判断是否为 Email 地址
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsVersion(System.String)">
            <summary>
            Is version
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsIpAddress(System.String)">
            <summary>
            Is IpAddress
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.OneAbsentChar(System.String,System.String)">
            <summary>
            One Absent Char
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsDateTime(System.String)">
            <summary>
            Is DateTime
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsDateTimeOffset(System.String)">
            <summary>
            Is DateTimeOffset
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsTimeSpan(System.String)">
            <summary>
            Is TImeSpan
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsDateTimeExact(System.String,System.String)">
            <summary>
            Is DateTime
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsDateTimeOffsetExact(System.String,System.String)">
            <summary>
            Is DateTimeOffset
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsTimeSpanExact(System.String,System.String)">
            <summary>
            Is TImeSpan
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsEnum(System.String,System.Type)">
            <summary>
            Is Enum
            </summary>
            <param name="str"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsEnum``1(System.String)">
            <summary>
            Is Enum
            </summary>
            <param name="str"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsGuid(System.String)">
            <summary>
            Is Guid
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsGuidExact(System.String,System.String)">
            <summary>
            Is Guid
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsNumeric(System.String)">
            <summary>
            Is numeric
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsByte(System.String)">
            <summary>
            Is byte
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsSByte(System.String)">
            <summary>
            Is SByte
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsShort(System.String)">
            <summary>
            Is short
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsInt(System.String)">
            <summary>
            Is int
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsLong(System.String)">
            <summary>
            Is long
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsUShort(System.String)">
            <summary>
            Us ushort
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsUInt(System.String)">
            <summary>
            Is uint
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsULong(System.String)">
            <summary>
            Is ulong
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsInt16(System.String)">
            <summary>
            Is int16
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsInt32(System.String)">
            <summary>
            Is inrt32
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsInt64(System.String)">
            <summary>
            Is int64
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsUInt16(System.String)">
            <summary>
            Is uint16
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsUInt32(System.String)">
            <summary>
            Is uint32
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.UsUInt64(System.String)">
            <summary>
            Is uint64
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsFloat(System.String)">
            <summary>
            Is float
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsDouble(System.String)">
            <summary>
            Is double
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsDecimal(System.String)">
            <summary>
            Is decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ToCapitalCase(System.String)">
            <summary>
            To capital case
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.AllCapitals(System.String)">
            <summary>
            To all capitals
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ToCamelCase(System.String)">
            <summary>
            To camel case
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsUpper(System.String)">
            <summary>
            Is upper
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsLower(System.String)">
            <summary>
            Is lower
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IsSameWords(System.String,System.String)">
            <summary>
            Is same words
            </summary>
            <param name="text"></param>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TotalWords(System.String)">
            <summary>
            Total words
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.LastWord(System.String)">
            <summary>
            Last word
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SecondWord(System.String)">
            <summary>
            Second word
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.FirstWord(System.String)">
            <summary>
            First word
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Contains(System.String,System.String[])">
            <summary>
            Contains
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Contains(System.String,System.Char)">
            <summary>
            Contains
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Contains(System.String,System.Char[])">
            <summary>
            Contains
            </summary>
            <param name="text"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsNumber(System.String)">
            <summary>
            是否包含数字
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Contains ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsWholeWord(System.String,System.String)">
            <summary>
            Contains whole word
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsAnyWholeWord(System.String,System.String[])">
            <summary>
            Contains ant whole word
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsWholePhrase(System.String,System.String)">
            <summary>
            Contains whole phrase
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsWholePhraseAny(System.String,System.String[])">
            <summary>
            Contains whole phrase any
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsWholePhraseAll(System.String,System.String[])">
            <summary>
            Contains whole phrase all
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Contains any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsAllIgnoreCase(System.String,System.String[])">
            <summary>
            Contains all ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsOnlyThisChar(System.String,System.Char)">
            <summary>
            Contains onle this char
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.CountLines(System.String)">
            <summary>
            Count lines
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.CountOccurrences(System.String,System.Char)">
            <summary>
            Count Occurrences
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.CountOccurrences(System.String,System.String)">
            <summary>
            Count Occurrences
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.DiffCharsCount(System.String,System.String)">
            <summary>
            Diff chars' count
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.DiffCharsCountIgnoreCase(System.String,System.String)">
            <summary>
            Diff chars' count ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.DiffOnlyOneChar(System.String,System.String)">
            <summary>
            Diff only one char
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.OnlyDigits(System.String)">
            <summary>
            Only Digits
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.OnlyDigits(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Only Digits
            </summary>
            <param name="text"></param>
            <param name="exceptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TotalDigits(System.String)">
            <summary>
            Total digits
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsOnlyDigits(System.String)">
            <summary>
            Contains only digits
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.NotContainsDigits(System.String)">
            <summary>
            Not Contains Digits
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ContainsDigit(System.String)">
            <summary>
            Contains digit
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IncludeDigits(System.String)">
            <summary>
            Include digits
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IncludeDigits(System.String,System.Int32)">
            <summary>
            Include digits
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Equals ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EqualsToAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Equals to any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.FindFirstPhrase(System.String,System.String[])">
            <summary>
            Find first phrase
            </summary>
            <param name="text"></param>
            <param name="phrasesToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.FindFirstOccurrence(System.String,System.String[])">
            <summary>
            Find first occurrence
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.FindAndReplaceFirstOccurrence(System.String,System.String,System.String[])">
            <summary>
            Find and replace first occurrence
            </summary>
            <param name="text"></param>
            <param name="newValue"></param>
            <param name="oldValues"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.FindAndInsertBeforeFirstOccurrence(System.String,System.String,System.String[])">
            <summary>
            Find and insert before first occurrence
            </summary>
            <param name="text"></param>
            <param name="textInsert"></param>
            <param name="oldValues"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IndexWholePhrase(System.String,System.String,System.Int32)">
            <summary>
            Index whole phrase
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IndexOfIgnoreCase(System.String,System.String)">
            <summary>
            Index of ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.LastIndexOfIgnoreCase(System.String,System.String)">
            <summary>
            Last index of ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.LastIndexOfIgnoreCase(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Last index of ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IndexOfIgnoreCase(System.String,System.Int32,System.String)">
            <summary>
            Index of ignore case
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.LastIndexOfAny(System.String,System.String[])">
            <summary>
            Last index of any
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IncludeLetters(System.String)">
            <summary>
            Include Letters
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.IncludeLetters(System.String,System.Int32)">
            <summary>
            Include Letters
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TotalLetters(System.String)">
            <summary>
            Total letters
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TotalLowerLetters(System.String)">
            <summary>
            Total lower letters
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TotalUpperLetters(System.String)">
            <summary>
            Total upper letters
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Remove(System.String,System.String)">
            <summary>
            Remove
            </summary>
            <param name="text"></param>
            <param name="removeText"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.RemoveFromIgnoreCase(System.String,System.String)">
            <summary>
            Remove from ignore case
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.RemoveDuplicateSpaces(System.String)">
            <summary>
            Remove duplicate space
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.RemoveDuplicateChar(System.String,System.Char)">
            <summary>
            Remove duplicate char
            </summary>
            <param name="me"></param>
            <param name="charRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.RemoveChars(System.String,System.Char[])">
            <summary>
            Remove chars
            </summary>
            <param name="me"></param>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.RemoveAccentsIgnoreCaseAndÑ(System.String)">
            <summary>
            Remove accents ignore case and N
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.RemoveAccentsIgnoreCase(System.String)">
            <summary>
            Remove accents ignore case
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Replace ignore case
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceOnlyWholePhrase(System.String,System.String,System.String)">
            <summary>
            Replace only whole phrase
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceFirstOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace first occurrence
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceLastOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace last occurrence
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceOnlyAtEndIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace only at end ignore case
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replace
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="comparisionType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceRecursive(System.String,System.String,System.String)">
            <summary>
            Replace recursive
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceCharsWithSpace(System.String,System.Char[])">
            <summary>
            Replace chars with space
            </summary>
            <param name="me"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.ReplaceNumbersWith(System.String,System.Char)">
            <summary>
            Replace numbers with...
            </summary>
            <param name="me"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EvaluateSimilarity(System.String,System.String,System.Double)">
            <summary>
            Evaluate Similarity
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="similarityMinimal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EvaluateSimilarity(System.String,System.String,System.Double,System.Int32)">
            <summary>
            Evaluate Similarity
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="similarityMinimal"></param>
            <param name="diffFound"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EvaluateTypeSimilarity(System.String,System.String)">
            <summary>
            Evaluate Type Similarity
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Split(System.String,System.String)">
            <summary>
            根据给定的 splitCode 对字符串进行切割
            </summary>
            <param name="string"></param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitInWords(System.String)">
            <summary>
            Split in words
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitInWordsLongerThan(System.String,System.Int32)">
            <summary>
            Split in words longer than...
            </summary>
            <param name="s"></param>
            <param name="wordlength"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitInLines(System.String)">
            <summary>
            Split in lines
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitInLinesTyped``1(System.String)">
            <summary>
            Split in lines
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitInLinesRemoveEmptys(System.String)">
            <summary>
            Split in lines and remove empty
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitByIndex(System.String,System.Int32)">
            <summary>
            Split by index
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitWordsByIndex(System.String,System.Int32)">
            <summary>
            Split words by index
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitTyped``1(System.String,System.Char)">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SplitTyped``1(System.String,System.String)">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.StartsWith(System.String,System.String[])">
            <summary>
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.StartsWith(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Starts with ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.StartsWithAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Starts with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.StartsWithAnyIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Starts with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EndsWith(System.String,System.String[])">
            <summary>
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EndsWith(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Ends with ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EndsWithAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Ends with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.EndsWithAnyIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ends with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Cut off from right to left.
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Cut off from left to right
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Substring(System.String,System.String)">
            <summary>
            SubString
            </summary>
            <param name="text"></param>
            <param name="startText"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SubstringFrom(System.String,System.String)">
            <summary>
            SubString from...
            </summary>
            <param name="me"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.SubstringTo(System.String,System.String)">
            <summary>
            SubString to...
            </summary>
            <param name="me"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncate
            </summary>
            <param name="original"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TrimAll(System.Collections.Generic.IList{System.String})">
            <summary>
            Trim all
            </summary>
            <param name="texts"></param>
        </member>
        <member name="M:Cosmos.StringExtensions.TrimPhrase(System.String,System.String)">
            <summary>
            Trim phrase
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TrimPhraseStart(System.String,System.String)">
            <summary>
            Trim phrase start
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringExtensions.TrimPhraseEnd(System.String,System.String)">
            <summary>
            Trim phrase end
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ConversionExtensions">
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
            <summary>
            Conversion extensions
            </summary>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.Object,System.Type)">
            <summary>
            Convert object to given type.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.Object,System.Type,System.Object)">
            <summary>
            Convert object to given type.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.Object,System.Reflection.TypeInfo)">
            <summary>
            Convert object to given type.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.Object,System.Reflection.TypeInfo,System.Object)">
            <summary>
            Convert object to given type.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``1(System.Object)">
            <summary>
            Convert object to given type.
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``1(System.Object,``0)">
            <summary>
            Convert object to given type.
            </summary>
            <param name="obj"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.Object,System.Type,EnumsNET.EnumValidation)">
            <summary>
            Cast to
            </summary>
            <param name="fromObj"></param>
            <param name="enumTye"></param>
            <param name="validation"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``1(System.String,Cosmos.Conversions.IgnoreCase,``0,System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Cast to
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="formatProvider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``1(System.String,``0)">
            <summary>
            Cast to
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``1(System.String,Cosmos.Conversions.CastingContext,``0)">
            <summary>
            Cast to
            </summary>
            <param name="str"></param>
            <param name="context"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.String,System.Type,Cosmos.Conversions.CastingContext,System.Object)">
            <summary>
            Cast to
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <param name="defaultVal"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo(System.String,System.Type,Cosmos.Conversions.IgnoreCase,System.Object,System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Cast to
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <param name="defaultVal"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToNullable``1(System.String,Cosmos.Conversions.IgnoreCase,System.Nullable{``0},System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Cast to nullable
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <param name="ignoreCase"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="formatProvider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToNullable(System.String,System.Type,Cosmos.Conversions.IgnoreCase,System.Object,System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Cast to nullable
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <param name="ignoreCase"></param>
            <param name="defaultVal"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDateTime(System.String,System.DateTime)">
            <summary>
            To DateTime
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDateTimeOffset(System.String,System.DateTimeOffset)">
            <summary>
            To DateTimeOffset
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToTimeSpan(System.String,System.TimeSpan)">
            <summary>
            To TimeSpan
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToNullableDateTime(System.String)">
            <summary>
            To nullable DateTime
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToNullableDateTimeOffset(System.String)">
            <summary>
            To nullable DateTimeOffset
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToNullableTimeSpan(System.String)">
            <summary>
            To nullable TimeSpan
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToEnum``1(System.String)">
            <summary>
            将指定的字符串转换为枚举
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToEnum``1(System.String,System.Boolean)">
            <summary>
            将指定的字符串转换为枚举
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="str">     </param>
            <param name="ignoreCase"> 是否区分大小写 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToEnum``1(System.String,``0)">
            <summary>
            将指定的字符串转换为枚举
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToEnum``1(System.String,System.Boolean,``0)">
            <summary>
            将指定的字符串转换为枚举
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="str"></param>
            <param name="ignoreCase">是否区分大小写</param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToGuid(System.String)">
            <summary>
            To GUID
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToGuid(System.String,System.Guid)">
            <summary>
            To GUID
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToNullableGuid(System.String)">
            <summary>
            To nullable GUID
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToShort(System.String,System.Int16)">
            <summary>
            To short
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToShort(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Int16}[])">
            <summary>
            To short
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUShort(System.String,System.UInt16)">
            <summary>
            To ushort
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUShort(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.UInt16}[])">
            <summary>
            To ushort
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt(System.String,System.Int32)">
            <summary>
            To int32
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Int32}[])">
            <summary>
            To int32
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt(System.String,System.UInt32)">
            <summary>
            To uint32
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.UInt32}[])">
            <summary>
            To uint32
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToLong(System.String,System.Int64)">
            <summary>
            To long
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToLong(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Int64}[])">
            <summary>
            To long
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToULong(System.String,System.UInt64)">
            <summary>
            To ulong
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToULong(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.UInt64}[])">
            <summary>
            To ulong
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToFloat(System.String,System.Single)">
            <summary>
            To float
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToFloat(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Single}[])">
            <summary>
            To float
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDouble(System.String,System.Double)">
            <summary>
            To float
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDouble(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Double}[])">
            <summary>
            To float
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDecimal(System.String,System.Decimal)">
            <summary>
            To decimal
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDecimal(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Decimal}[])">
            <summary>
            To decimal
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt16(System.String,System.Int16)">
            <summary>
            To int16
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt16(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Int16}[])">
            <summary>
            To int16
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt16(System.String,System.UInt16)">
            <summary>
            To uint16
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt16(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.UInt16}[])">
            <summary>
            To uint16
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt32(System.String,System.Int32)">
            <summary>
            To int32
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt32(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Int32}[])">
            <summary>
            To int32
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt32(System.String,System.UInt32)">
            <summary>
            To uint32
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt32(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.UInt32}[])">
            <summary>
            To uint32
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt64(System.String,System.Int64)">
            <summary>
            To int64
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToInt64(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.Int64}[])">
            <summary>
            To int64
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt64(System.String,System.UInt64)">
            <summary>
            To uint64
            </summary>
            <param name="str"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToUInt64(System.String,Cosmos.Conversions.IConversionImpl{System.String,System.UInt64}[])">
            <summary>
            To uint64
            </summary>
            <param name="str"></param>
            <param name="impls"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToASCII(System.Byte[])">
            <summary>
            To ASCII
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToASCII(System.Char)">
            <summary>
            Convert char to ascii value
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToBinary(System.Byte)">
            <summary>
            To binary
            </summary>
            <param name="byte"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToBinary(System.Int32)">
            <summary>
            To binary
            </summary>
            <param name="decimal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToBinary(System.String)">
            <summary>
            To binary
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDecimalism(System.Byte,System.Byte)">
            <summary>
            To decimalism
            </summary>
            <param name="highAddrByte"></param>
            <param name="lowAddrByte"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDecimalism(System.Byte,System.Byte,System.Boolean)">
            <summary>
            To decimalism
            </summary>
            <param name="highAddrByte"></param>
            <param name="lowAddrByte"></param>
            <param name="isRadix"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToDecimalism(System.String,Cosmos.Conversions.ScaleStyles)">
            <summary>
            To decimalism
            </summary>
            <param name="scaleStr"></param>
            <param name="fromStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToHexadecimal(System.Byte)">
            <summary>
            To hexadecimal
            </summary>
            <param name="byte"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToHexadecimal(System.Byte[])">
            <summary>
            To hexadecimal
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToHexadecimal(System.Byte,System.Byte)">
            <summary>
            To hexadecimal
            </summary>
            <param name="highAddrByte"></param>
            <param name="lowAddrByte"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToHexadecimal(System.Int32)">
            <summary>
            To hexadecimal
            </summary>
            <param name="decimal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToHexadecimal(System.Int32,System.Int32)">
            <summary>
            To hexadecimal
            </summary>
            <param name="decimal"></param>
            <param name="formatLength"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToHexadecimal(System.String,Cosmos.Conversions.ScaleStyles,System.Text.Encoding)">
            <summary>
            To hexadecimal
            </summary>
            <param name="scaleStr"></param>
            <param name="fromStyle"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToBytes(System.IO.Stream)">
            <summary>
            Convert stream to bytes
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToBytesAsync(System.IO.Stream)">
            <summary>
            Convert stream to bytes async
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Int16,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.Int16},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.UInt16,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.UInt16},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Int32,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.Int32},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.UInt32,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.UInt32},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Int64,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.Int64},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.UInt64,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.UInt64},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Single,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.Single},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Double,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.Double},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Decimal,System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Nullable{System.Decimal},System.String)">
            <summary>
            To string
            </summary>
            <param name="number"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.String,Cosmos.Conversions.ScaleStyles,System.Text.Encoding)">
            <summary>
            To string
            </summary>
            <param name="originalStr"></param>
            <param name="fromStyle"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString``1(``0[],System.String,System.String)">
            <summary>
            用指定的字符串来指示其边界（输出为 String 结果）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="format"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastToString(System.Object)">
            <summary>
            To string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``2(``0,``1)">
            <summary>
            Cast to
            </summary>
            <param name="fromObj"></param>
            <param name="defaultVal"></param>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``2(``0,Cosmos.Conversions.CastingContext,``1)">
            <summary>
            Cast to
            </summary>
            <param name="fromObj"></param>
            <param name="context"></param>
            <param name="defaultVal"></param>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ConversionExtensions.CastTo``2(``0,EnumsNET.EnumValidation)">
            <summary>
            Cast to
            </summary>
            <param name="fromObj"></param>
            <param name="validation"></param>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ExceptionExtensions">
            <summary>
            Exception extensions<br />
            异常扩展
            </summary>
        </member>
        <member name="M:Cosmos.ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ExceptionExtensions.Unwrap(System.Exception,System.Type,System.Boolean)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <param name="untilType"></param>
            <param name="canbeSubClass"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ExceptionExtensions.Unwrap``1(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ExceptionExtensions.ToUnwrappedString(System.Exception)">
            <summary>
            Unwrap and gets message<br />
            解包并返回消息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ExceptionExtensions.ToFullUnwrappedString(System.Exception)">
            <summary>
            Unwrap and gets full message<br />
            解包，尝试返回完整信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.LambdaExtensions">
            <summary>
            Lambda extensions
            </summary>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Operation(System.Linq.Expressions.Expression,Cosmos.Queries.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Cosmos.LambdaExtensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="T:Cosmos.RandomExtensions">
            <summary>
            随机数扩展方法
            </summary>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextBool(System.Random)">
            <summary>
            随机返回 True 或 False
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            随机返回一个指定的枚举对象的成员
            </summary>
            <typeparam name="T"> 枚举 </typeparam>
            <param name="random"></param>
            <returns> 枚举对象的成员 </returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="random"></param>
            <param name="length"> 字节长度 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextUInt16(System.Random)">
            <summary>
            随机返回一个无符号八位整数。
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextInt16(System.Random)">
            <summary>
            随机返回一个有符号十六位整数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextFloat(System.Random)">
            <summary>
            随机返回一个单精度浮点数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            在指定范围内随机返回一个时间
            </summary>
            <param name="random">  </param>
            <param name="minValue"> 时间起始 </param>
            <param name="maxValue"> 时间截止 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            随机返回一个时间
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.OneOf``1(System.Random,``0[])">
            <summary>
            随机获得一个指定范围的结果
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.SafeAndNullableExtensions">
            <summary>
            Safety value and nullable value extensions
            </summary>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全返回值
            </summary>
            <param name="value"> 可空值 </param>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeValue``1(System.Nullable{``0},``0)">
            <summary>
            安全返回值
            <para>如果可空值真为空，则返回默认值</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeValue(System.String)">
            <summary>
            获取 Null安全 的字符串
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeString(System.Object)">
            <summary>
            安全获取字符串类型
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeString(System.Object,System.String)">
            <summary>
            安全获取字符串类型
            </summary>
            <param name="object"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeDateTime(System.Object)">
            <summary>
            获取安全时间类型
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeDateTime(System.Object,System.DateTime)">
            <summary>
            获取安全时间类型
            </summary>
            <param name="object"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeGuid(System.Object)">
            <summary>
            获取安全的 Guid 类型
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeGuid(System.Object,System.Guid)">
            <summary>
            获取安全的 Guid 类型
            </summary>
            <param name="object"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeTrim(System.String)">
            <summary>
            安全移除空白字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeQueryable``1(System.Linq.IQueryable{``0})">
            <summary>
            安全获得 IQueryable 集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeQueryable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            安全获得 IQueryable 集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeQueryable(System.Linq.IQueryable)">
            <summary>
            安全获得 IQueryable 集合
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeQuertable(System.Collections.IEnumerable)">
            <summary>
            安全获得 IQueryable 集合
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.ToNonNullableType(System.Type)">
            <summary>
            获取所给定的可空类型的不可空类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.ToNonNullableTypeInfo(System.Reflection.TypeInfo)">
            <summary>
            获取所给定的可空类型的不可空类型
            </summary>
            <param name="typeinfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeInvoke(System.EventHandler,System.Object)">
            <summary>
            以给定参数安全执行事件
            </summary>
            <param name="hander"></param>
            <param name="sender"></param>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeInvoke(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            以给定参数安全执行事件
            </summary>
            <param name="hander"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cosmos.SafeAndNullableExtensions.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            以给定参数安全执行事件
            </summary>
            <typeparam name="TEventArgs"></typeparam>
            <param name="hander"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Cosmos.ObjectExtensions">
            <summary>
            Object extensions
            </summary>
        </member>
        <member name="M:Cosmos.ObjectExtensions.As``1(System.Object)">
            <summary>
            As
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object)">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,``0)">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,System.Func{``0})">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.DeepCopy``1(``0)">
            <summary>
            Deep copy
            </summary>
            <typeparam name="T"></typeparam>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.ExpressionCopy``1(``0)">
            <summary>
            Expression copy
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.Copier`1.Copy(`0)">
            <summary>
            Deep copy by expression
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn(System.Byte,System.Byte[])">
            <summary>
            Is On
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn(System.Int16,System.Int16[])">
            <summary>
            Is On
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,``0[])">
            <summary>
            Is On
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is On
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,System.Collections.Generic.HashSet{``0})">
            <summary>
            Is On
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOnIgnoreCase(System.String,System.String[])">
            <summary>
            Is On and ignore case
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.RegexExtensions">
            <summary>
            Regex extensons
            </summary>
        </member>
        <member name="M:Cosmos.RegexExtensions.GetGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Get group value
            </summary>
            <param name="match"></param>
            <param name="group"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Cosmos.StringBuilderExtensions">
            <summary>
            StringBuilder extensions
            </summary>
        </member>
        <member name="M:Cosmos.StringBuilderExtensions.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Cosmos.StringBuilderExtensions.ToReverseBuilder(System.Text.StringBuilder)">
            <summary>
            Reverse <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringBuilderExtensions.ToReverseString(System.Text.StringBuilder)">
            <summary>
            Reverse string
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.StringBuilderExtensions.ToCharArray(System.Text.StringBuilder)">
            <summary>
            To char array
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.TypeSimilarity">
            <summary>
            Type Similarity
            </summary>
        </member>
        <member name="F:Cosmos.TypeSimilarity.Any">
            <summary>
            Any
            </summary>
        </member>
        <member name="F:Cosmos.TypeSimilarity.Same">
            <summary>
            Same
            </summary>
        </member>
        <member name="F:Cosmos.TypeSimilarity.MayorLong">
            <summary>
            Mayor long
            </summary>
        </member>
        <member name="F:Cosmos.TypeSimilarity.MinorLong">
            <summary>
            Minor long
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.CombStyle">
            <summary>
            Comb styles
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.CombStyle.NormalStyle">
            <summary>
            Normal style
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.CombStyle.UnixStyle">
            <summary>
            Unix style
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.CombStyle.SqlStyle">
            <summary>
            Sql style
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.CombStyle.LegacySqlStyle">
            <summary>
            Legacy sql style
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.CombStyle.PostgreSqlStyle">
            <summary>
            PostgreSql style
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.GuidBytesStyle">
            <summary>
            Guid bytes styles
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidBytesStyle.LittleEndianByteArray">
            <summary>
            Little endian byte array
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidBytesStyle.BigEndianByteArray">
            <summary>
            Big endian by array
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid">
            <summary>
            A <see cref="T:System.Guid"/> that has been decoded into its fields.
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.#ctor(System.Guid@)">
            <summary>
            Create a new <see cref="T:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid"/> instance.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.#ctor(System.Byte[])">
            <summary>
            Create a new <see cref="T:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid"/> instance.
            </summary>
            <param name="littleEndianGuidBytes"></param>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.ToGuid">
            <summary>
            Converts the decoded GUID back to a <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.ToLittleEndianByteArray">
            <summary>
            Converts the decoded GUID to a binary little-endian representation.
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.ToBigEndianByteArray">
            <summary>
            Converts the decoded GUID to a binary big-endian representation.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Variant">
            <summary>
            Gets the 3-bit Variant field of the GUID.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version">
            <summary>
            Gets the 4-bit Version field of the GUID. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Variant"/> returns <see cref="F:Cosmos.IdUtils.GuidImplements.Internals.GuidVariant.Rfc4122"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Domain">
            <summary>
            Gets the Domain field of the security GUID. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.LocalIdentifier">
            <summary>
            Gets the Local Identifier field of the security GUID. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Timestamp">
            <summary>
            Gets the 60-bit Timestamp field of the GUID. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.TimeBased"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.PartialTimestamp">
            <summary>
            Gets the 28-bit Timestamp field of the GUID; the lowest 32 bits of the returned value are always zero. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.CreateTime">
            <summary>
            Gets the date and time that this GUID was created, in UTC. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.TimeBased"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.PartialCreateTime">
            <summary>
            Gets the approximate date and time that this GUID was created, in UTC. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.ClockSequence">
            <summary>
            Gets the 14-bit Clock Sequence field of the GUID. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.TimeBased"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.PartialClockSequence">
            <summary>
            Gets the 6-bit Clock Sequence field of the GUID. The lowest 8 bits of the returned value are always 0. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Node">
            <summary>
            Gets the 6-byte (48-bit) Node field of the GUID. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.TimeBased"/> or <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>.
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.NodeIsMac">
            <summary>
            Returns <c>true</c> if the Node field is a MAC address; returns <c>false</c> if the Node field is a random value. This is only valid if <see cref="P:Cosmos.IdUtils.GuidImplements.Core.DecodedGuid.Version"/> returns <see cref="F:Cosmos.IdUtils.GuidVersion.TimeBased"/> or <see cref="F:Cosmos.IdUtils.GuidVersion.DceSecurity"/>.
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.GuidImplements.Internals.DceDomain">
            <summary>
            Known values of DCE domains.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.DceDomain.Person">
            <summary>
            The principal domain. On POSIX machines, this is the POSIX UID domain.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.DceDomain.Group">
            <summary>
            The group domain. On POSIX machines, this is the POSIX GID domain.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.DceDomain.Organization">
            <summary>
            The organization domain.
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Internals.GuidExtensions.ToBigEndianByteArray(System.Guid@)">
            <summary>
            Returns a 16-element byte array that contains the value of the GUID, in big-endian format.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Internals.GuidExtensions.Decode(System.Guid@)">
            <summary>
            Decodes a GUID into its fields.
            </summary>
            <param name="guid">The GUID to decode.</param>
        </member>
        <member name="T:Cosmos.IdUtils.GuidImplements.Internals.GuidNamespaces">
            <summary>
            Guid namespace
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidNamespaces.Dns">
            <summary>
            For names that are fully-qualified domain names.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidNamespaces.Url">
            <summary>
            For names that are URLs.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidNamespaces.Oid">
            <summary>
            For names that are ISO OIDs.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidNamespaces.X500">
            <summary>
            For names that are X.500 DNs (in DER or a text output format).
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Internals.GuidUtility.Copy(System.Byte[])">
            <summary>
            Creates a new array that is a copy of the specified array.
            </summary>
            <param name="guid">The GUID, as a byte array.</param>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Internals.GuidUtility.CopyWithEndianSwap(System.Byte[])">
            <summary>
            Creates a new array that is an endian conversion of the specified array, converting big-endian to little-endian or vice versa.
            </summary>
            <param name="guid">The GUID, as a byte array.</param>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.Internals.GuidUtility.EndianSwap(System.Byte[])">
            <summary>
            Converts a big-endian GUID to a little-endian GUID, or vice versa. This method modifies the array in-place.
            </summary>
            <param name="guid">The GUID, as a byte array.</param>
        </member>
        <member name="T:Cosmos.IdUtils.GuidImplements.Internals.GuidVariant">
            <summary>
            Known values for the <see cref="T:System.Guid"/> Variant field.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidVariant.NcsBackwardCompatibility">
            <summary>
            Reserved for NCS backward compatibility.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidVariant.Rfc4122">
            <summary>
            A GUID conforming to RFC 4122.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidVariant.MicrosoftBackwardCompatibility">
            <summary>
            Reserved for Microsoft backward compatibility.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidImplements.Internals.GuidVariant.ReservedForFutureDefinition">
            <summary>
            Reserved for future definition.
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider">
            <summary>
            Unix timestamp style provider
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider.Create">
            <summary>
            Create
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider.Create(System.Guid)">
            <summary>
            Create
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider.Create(Cosmos.IdUtils.NoRepeatMode)">
            <summary>
            Create
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider.Create(System.Guid,Cosmos.IdUtils.NoRepeatMode)">
            <summary>
            Create
            </summary>
            <param name="value"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider.Create(System.DateTime)">
            <summary>
            Create
            </summary>
            <param name="secureTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidImplements.UnixTimeStampStyleProvider.Create(System.Guid,System.DateTime)">
            <summary>
            Create
            </summary>
            <param name="value"></param>
            <param name="secureTimestamp"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.GuidProvider">
            <summary>
            Guid provider
            </summary>
            <summary>
            Guid provider
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(Cosmos.IdUtils.CombStyle,Cosmos.IdUtils.NoRepeatMode)">
            <summary>
            Create
            </summary>
            <param name="style"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(System.Guid,Cosmos.IdUtils.CombStyle,Cosmos.IdUtils.NoRepeatMode)">
            <summary>
            Create
            </summary>
            <param name="value"></param>
            <param name="style"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(System.DateTime,Cosmos.IdUtils.CombStyle)">
            <summary>
            Create
            </summary>
            <param name="secureTimestamp"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(System.Guid,System.DateTime,Cosmos.IdUtils.CombStyle)">
            <summary>
            Create
            </summary>
            <param name="value"></param>
            <param name="secureTimestamp"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.CreateRandom">
            <summary>
            Create random style guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(Cosmos.IdUtils.GuidStyle,Cosmos.IdUtils.NoRepeatMode)">
            <summary>
            Create
            </summary>
            <param name="style"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(System.DateTime,Cosmos.IdUtils.GuidStyle)">
            <summary>
            Create
            </summary>
            <param name="secureTimestamp"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(System.Byte[],Cosmos.IdUtils.GuidBytesStyle)">
            <summary>
            Create
            </summary>
            <param name="endianGuidBytes"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.GuidProvider.Create(System.Guid,System.Byte[],Cosmos.IdUtils.GuidVersion)">
            <summary>
            Create
            </summary>
            <param name="namespace"></param>
            <param name="name"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.GuidStyle">
            <summary>
            Guid style
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.BasicStyle">
            <summary>
            Basic
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.TimeStampStyle">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.UnixTimeStampStyle">
            <summary>
            Unix timestamp
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.SqlTimeStampStyle">
            <summary>
            Sql timestamp
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.LegacySqlTimeStampStyle">
            <summary>
            Legacy sql timestamp
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.PostgreSqlTimeStampStyle">
            <summary>
            PostgreSql timestamp
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.CombStyle">
            <summary>
            Comb
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.SequentialAsStringStyle">
            <summary>
            Sequential as string
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.SequentialAsBinaryStyle">
            <summary>
            Sequential as binary
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.SequentialAsEndStyle">
            <summary>
            Sequential as end
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidStyle.EquifaxStyle">
            <summary>
            Equifax
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.GuidVersion">
            <summary>
            Known values for the <see cref="T:System.Guid"/> Version field.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidVersion.TimeBased">
            <summary>
            Time-based (sequential) GUID.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidVersion.DceSecurity">
            <summary>
            DCE Security GUID with embedded POSIX UID/GID. See "DCE 1.1: Authentication and Security Services", Chapter 5 and "DCE 1.1: RPC", Appendix A.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidVersion.NameBasedMd5">
            <summary>
            Name-based GUID using the MD5 hashing algorithm.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidVersion.Random">
            <summary>
            Random GUID.
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.GuidVersion.NameBasedSha1">
            <summary>
            Name-based GUID using the SHA-1 hashing algorithm.
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.ModelIdAccessor">
            <summary>
            Model Id Accessor
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.ModelIdAccessor.#ctor">
            <summary>
            Create a new <see cref="T:Cosmos.IdUtils.ModelIdAccessor"/> instance.
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.ModelIdAccessor.GetNextIndex">
            <summary>
            Get next index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.ModelIdAccessor.GetTimeSpot">
            <summary>
            Get time spot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.ModelIdAccessor.RefreshTimeSpot">
            <summary>
            Refresh time spot
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.NoRepeatMode">
            <summary>
            No repeat mode
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.NoRepeatMode.Off">
            <summary>
            Off<br />
            关
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.NoRepeatMode.On">
            <summary>
            On<br />
            开
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.RandomIdProvider">
            <summary>
            Random Id Provider
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.RandomIdProvider.ALLNUMBERS">
            <summary>
            All numbers from 0 to 9
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.RandomIdProvider.ALLWORDS">
            <summary> 
            1234567890qwertyuiopasdfghjklzxcvbnm1234567890QWERTYUIOPASDFGHJKLZXCVBNM
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.RandomIdProvider.SIMPLEWORDS">
            <summary> 
            2345678wertyuiopasdfghjkzxcvbnm23456780QWERTYUPASDFGHJKLZXCVBNM
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.RandomIdProvider.Create(System.Int32,System.String)">
            <summary> 
            Create Random Id
            </summary>
            <param name="length">Length of random id you want to create</param>
            <param name="dict">Random Charter Dictionary, 0-9a-zA-Z as default.</param>
        </member>
        <member name="M:Cosmos.IdUtils.RandomIdProvider.Create(System.String,System.String)">
            <summary> 
            Create Random Id
            </summary>
            <param name="format">Format of random id you want to create</param>
            <param name="dict">Random Charter Dictionary, 0-9a-zA-Z as default.</param>
        </member>
        <member name="M:Cosmos.IdUtils.RandomId.#ctor(System.Int32,System.String)">
            <summary> 构造函数
            </summary>
            <param name="length">生成Id长度</param>
            <param name="dict">随机字符字典,默认字典为0-9a-zA-Z</param>
        </member>
        <member name="M:Cosmos.IdUtils.RandomId.#ctor(System.String,System.String)">
            <summary> 构造函数
            </summary>
            <param name="format">生成Id格式</param>
            <param name="dict">随机字符字典,默认字典为0-9a-zA-Z</param>
        </member>
        <member name="M:Cosmos.IdUtils.RandomId.Create">
            <summary> 生成Id
            </summary>
        </member>
        <member name="T:Cosmos.IdUtils.RandomNonceStrProvider">
            <summary>
            Random NonceStr Provider
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.RandomNonceStrProvider.Create">
            <summary>
            Create random noncestr
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.RandomNonceStrProvider.Create(System.Int32)">
            <summary>
            Create random noncestr
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.SnowflakeIdWorker">
            <summary>
            Snowflake Id worker
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.TWEPOCH">
            <summary>
            基准时间
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.WORKER_ID_BITS">
            <summary>
            机器标识位数
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.DATA_CENTER_ID_BITS">
            <summary>
            数据标志位数
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.SEQUENCE_BITS">
            <summary>
            序列号识位数
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.MAX_WORKER_ID">
            <summary>
            机器ID最大值
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.MAX_DATA_CENTER_ID">
            <summary>
            数据标志ID最大值
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.SEQUENCE_MASK">
            <summary>
            序列号ID最大值
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.WORKER_ID_SHIFT">
            <summary>
            机器ID偏左移12位
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.DATA_CENTER_ID_SHIFT">
            <summary>
            数据ID偏左移17位
            </summary>
        </member>
        <member name="F:Cosmos.IdUtils.SnowflakeIdWorker.TIMESTAMP_LEFT_SHIFT">
            <summary>
            时间毫秒左移22位
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.SnowflakeIdWorker.WorkerId">
            <summary>
            Worker Id
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.SnowflakeIdWorker.DataCenterId">
            <summary>
            Data center Id
            </summary>
        </member>
        <member name="P:Cosmos.IdUtils.SnowflakeIdWorker.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.SnowflakeIdWorker.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Create a new <see cref="T:Cosmos.IdUtils.SnowflakeIdWorker"/> instance.
            </summary>
            <param name="workerId"></param>
            <param name="dataCenterId"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:Cosmos.IdUtils.SnowflakeIdWorker.NextId">
            <summary>
            Next Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.SnowflakeIdWorker.TilNextMillis(System.Int64)">
            <summary>
            防止产生的时间比之前的时间还要小（由于NTP回拨等问题）,保持增量的趋势.
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.SnowflakeIdWorker.TimeGen">
            <summary>
            获取当前的时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.SnowflakeProvider">
            <summary>
            Snowflake Provider
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.SnowflakeProvider.Create(System.Int64,System.Int64,System.Int64)">
            <summary>
            Create
            </summary>
            <param name="workerId"></param>
            <param name="dataCenterId"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IdUtils.SnowflakeProvider.Create``1(System.Int64,System.Int64,System.Int64)">
            <summary>
            Create
            </summary>
            <typeparam name="TSnowflakeIdWorker"></typeparam>
            <param name="workerId"></param>
            <param name="dataCenterId"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.TraceIdAccessor">
            <summary>
            Trace Id Accessor
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.TraceIdAccessor.#ctor(Cosmos.IdUtils.ITraceIdMaker)">
            <summary>
            Create a new <see cref="T:Cosmos.IdUtils.TraceIdAccessor"/> instance.
            </summary>
            <param name="maker"></param>
        </member>
        <member name="M:Cosmos.IdUtils.TraceIdAccessor.GetTraceId">
            <summary>
            Get Trace Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.DefaultTraceIdMaker">
            <summary>
            Default TraceIdMaker
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.DefaultTraceIdMaker.CreateId">
            <summary>
            Create Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.ITraceIdMaker">
            <summary>
            Trace Maker Interface
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.ITraceIdMaker.CreateId">
            <summary>
            Create Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.InterlockedUtil">
            <summary>
            Interlocked util
            </summary>
        </member>
        <member name="M:Cosmos.InterlockedUtil.Read(System.Int32@)">
            <summary>
            Read
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.InterlockedUtil.Read``1(``0@)">
            <summary>
            Read
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Joiners.CommonJoinUtils">
            <summary>
            Common join utils
            </summary>
        </member>
        <member name="M:Cosmos.Joiners.CommonJoinUtils.JoinToString``2(``1,System.Action{``1,System.String},System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.Func{``0,System.String},System.Func{``0,``0})">
            <summary>
            Join to string
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TContainer"></typeparam>
            <param name="container"></param>
            <param name="containerUpdateFunc"></param>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="predicate"></param>
            <param name="to"></param>
            <param name="replaceFunc"></param>
        </member>
        <member name="T:Cosmos.Joiners.IJoiner">
            <summary>
            Joiner Interface<br />
            连接器接口
            </summary>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.SkipNulls">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.UseForNull(System.String)">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.UseForNull(System.Func{System.String,System.String})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.WithKeyValueSeparator(System.String)">
            <summary>
            With KeyValue Separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.WithKeyValueSeparator(System.Char)">
            <summary>
            With KeyValue Separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.Join(System.String,System.String[])">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="str1"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.Join``1(System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.Join``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.Join``1(Cosmos.ITypeConverter{``0,System.String},``0,``0[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.Join``1(System.Func{``0,System.String},``0,``0[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="to"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.AppendTo(System.Text.StringBuilder,System.String,System.String[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="str1"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.AppendTo``1(System.Text.StringBuilder,Cosmos.ITypeConverter{``0,System.String},``0,``0[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="converter"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IJoiner.AppendTo``1(System.Text.StringBuilder,System.Func{``0,System.String},``0,``0[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="to"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Joiners.IMapJoiner">
            <summary>
            MapJoiner Interface<br />
            MapJoiner 接口
            </summary>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.SkipNulls">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.SkipNulls(Cosmos.Joiners.SkipNullType)">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.UseForNull(System.String,System.String)">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.UseForNull(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.UseForNull``2(``0,``1)">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.UseForNull``2(System.Func{``0,``0},System.Func{``1,``1})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.FromTuple">
            <summary>
            Switch to tuple mode<br />
            切换为 Tuple 模式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.Join(System.String,System.String,System.String[])">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.Join``1(System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.Join``1(System.Collections.Generic.IEnumerable{``0},``0,``0,Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.Join``1(Cosmos.ITypeConverter{``0,System.String},``0,``0,``0[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="restTs"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.AppendTo(System.Text.StringBuilder,System.String,System.String,System.String[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},``0,``0,Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.IMapJoiner.AppendTo``1(System.Text.StringBuilder,Cosmos.ITypeConverter{``0,System.String},``0,``0,``0[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="converter"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="restTs"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Joiners.ITupleJoiner">
            <summary>
            TupleJoiner Interface<br />
            TupleJoiner 接口
            </summary>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.SkipNulls">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.SkipNulls(Cosmos.Joiners.SkipNullType)">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.UseForNull``2(System.Func{``0,``1,``0},System.Func{``0,``1,``1})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="tupleKeyFunc"></param>
            <param name="tupleValueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.Join(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.Join(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.String,System.String)">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.Join(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String}[])">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.Join``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.Join``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},``0,``1,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.Join``2(System.Func{``0,System.String},System.Func{``1,System.String},System.ValueTuple{``0,``1},System.ValueTuple{``0,``1}[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.String,System.String)">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.AppendTo(System.Text.StringBuilder,System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String}[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.AppendTo``2(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.AppendTo``2(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},``0,``1,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.ITupleJoiner.AppendTo``2(System.Text.StringBuilder,System.Func{``0,System.String},System.Func{``1,System.String},System.ValueTuple{``0,``1},System.ValueTuple{``0,``1}[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Joiners.Joiner">
            <summary>
            Joiner<br />
            连接器
            </summary>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#SkipNulls">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#UseForNull(System.String)">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#UseForNull(System.Func{System.String,System.String})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.WithKeyValueSeparator(System.String)">
            <summary>
            With KeyValue Separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.WithKeyValueSeparator(System.Char)">
            <summary>
            With KeyValue Separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#Join``1(System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#Join``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#Join(System.String,System.String[])">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="str1"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#Join``1(Cosmos.ITypeConverter{``0,System.String},``0,``0[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#Join``1(System.Func{``0,System.String},``0,``0[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="to"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#AppendTo(System.Text.StringBuilder,System.String,System.String[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="str1"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#AppendTo``1(System.Text.StringBuilder,Cosmos.ITypeConverter{``0,System.String},``0,``0[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="converter"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IJoiner#AppendTo``1(System.Text.StringBuilder,System.Func{``0,System.String},``0,``0[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="to"></param>
            <param name="item1"></param>
            <param name="restItems"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.On(System.String)">
            <summary>
            On, create a new <see cref="T:Cosmos.Joiners.Joiner"/> instance.<br />
            On 操作，创建一个新 <see cref="T:Cosmos.Joiners.Joiner"/> 实例。
            </summary>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.On(System.Char)">
            <summary>
            On, create a new <see cref="T:Cosmos.Joiners.Joiner"/> instance.<br />
            On 操作，创建一个新 <see cref="T:Cosmos.Joiners.Joiner"/> 实例。
            </summary>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#SkipNulls">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#SkipNulls(Cosmos.Joiners.SkipNullType)">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#UseForNull(System.String,System.String)">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#UseForNull(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#UseForNull``2(``0,``1)">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#UseForNull``2(System.Func{``0,``0},System.Func{``1,``1})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#FromTuple">
            <summary>
            Switch to tuple mode<br />
            切换为 Tuple 模式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#Join``1(System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#Join``1(System.Collections.Generic.IEnumerable{``0},``0,``0,Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#Join(System.String,System.String,System.String[])">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#Join``1(Cosmos.ITypeConverter{``0,System.String},``0,``0,``0[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="restTs"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#AppendTo(System.Text.StringBuilder,System.String,System.String,System.String[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="restStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#AppendTo``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},``0,``0,Cosmos.ITypeConverter{``0,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#IMapJoiner#AppendTo``1(System.Text.StringBuilder,Cosmos.ITypeConverter{``0,System.String},``0,``0,``0[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="converter"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="restTs"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#SkipNulls">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#SkipNulls(Cosmos.Joiners.SkipNullType)">
            <summary>
            Skip null<br />
            跳过 null
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#UseForNull``2(System.Func{``0,``1,``0},System.Func{``0,``1,``1})">
            <summary>
            If null, then use the special value.<br />
            如果为 null，则使用指定的值来替代
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="tupleKeyFunc"></param>
            <param name="tupleValueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#Join(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#Join(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.String,System.String)">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#Join``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#Join``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},``0,``1,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#Join(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String}[])">
            <summary>
            Join<br />
            连接
            </summary>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#Join``2(System.Func{``0,System.String},System.Func{``1,System.String},System.ValueTuple{``0,``1},System.ValueTuple{``0,``1}[])">
            <summary>
            Join<br />
            连接
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#AppendTo(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.String,System.String)">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#AppendTo(System.Text.StringBuilder,System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String}[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <param name="builder"></param>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#AppendTo``2(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#AppendTo``2(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},``0,``1,System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="list"></param>
            <param name="defaultKey"></param>
            <param name="defaultValue"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Joiners.Joiner.Cosmos#Joiners#ITupleJoiner#AppendTo``2(System.Text.StringBuilder,System.Func{``0,System.String},System.Func{``1,System.String},System.ValueTuple{``0,``1},System.ValueTuple{``0,``1}[])">
            <summary>
            Append to...<br />
            附加到...
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <param name="tuple1"></param>
            <param name="restTuples"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Joiners.SkipNullType">
            <summary>
            Skip null types<br />
            跳过 null 的类型
            </summary>
        </member>
        <member name="F:Cosmos.Joiners.SkipNullType.Nothing">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:Cosmos.Joiners.SkipNullType.WhenBoth">
            <summary>
            When both
            </summary>
        </member>
        <member name="F:Cosmos.Joiners.SkipNullType.WhenEither">
            <summary>
            When either
            </summary>
        </member>
        <member name="F:Cosmos.Joiners.SkipNullType.WhenKeyIsNull">
            <summary>
            When key is null
            </summary>
        </member>
        <member name="F:Cosmos.Joiners.SkipNullType.WhenValueIsNull">
            <summary>
            When value is null
            </summary>
        </member>
        <member name="T:Cosmos.Lambdas">
            <summary>
            Lambda Utils<br />
            Lambda 工具集
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Cosmos.Lambdas.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式,范例1：t => t.Name == "A" ，结果1。
            范例2：t => t.Name == "A" &amp;&amp; t.Age =1 ，结果2。</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Lambdas.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Lambdas.Constant(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            获取常量表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.CreateParameter``1">
            <summary>
            创建参数
            </summary>
        </member>
        <member name="M:Cosmos.Lambdas.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.Starts``1(System.String,System.String)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.Ends``1(System.String,System.String)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Lambdas.ParsePredicate``1(System.String,System.Object,Cosmos.Queries.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:Cosmos.Numbers">
            <summary>
            Number Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Numbers.GetMembersBetween(System.Int32,System.Int32)">
            <summary>
            Get members between min value and max value (include min and max).
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.GetMembersBetween(System.Int64,System.Int64)">
            <summary>
            Get members between min value and max value (include min and max).
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToInt(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToInt(System.Object,System.Int32)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToLong(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToLong(System.Object,System.Int64)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToFloat(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToFloat(System.Object,System.Single)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDouble(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDouble(System.Object,System.Double)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDouble(System.Object,System.Int32)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Double"/> with specified precision.
            </summary>
            <param name="obj"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDouble(System.Object,System.Int32,System.Double)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Double"/> with specified precision.
            </summary>
            <param name="obj"></param>
            <param name="digits"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDecimal(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDecimal(System.Object,System.Decimal)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDecimal(System.Object,System.Int32)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Decimal"/> with specified precision.
            </summary>
            <param name="obj"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToDecimal(System.Object,System.Int32,System.Decimal)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to <see cref="T:System.Decimal"/> with specified precision.
            </summary>
            <param name="obj"></param>
            <param name="digits"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableInt(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Int32"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableLong(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Int64"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableFloat(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Single"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableDouble(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Double"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableDouble(System.Object,System.Int32)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Double"/> with specified precision.
            </summary>
            <param name="obj"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableDecimal(System.Object)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Decimal"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.ParseToNullableDecimal(System.Object,System.Int32)">
            <summary>
            Convert from an <see cref="T:System.Object"/> to nullable <see cref="T:System.Decimal"/> with specified precision.
            </summary>
            <param name="obj"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsInt(System.String)">
            <summary>
            To judge whether the string is integer or not.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsNumeric(System.String)">
            <summary>
            To judge whether the string is numeric or not.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            To judge whether the short value is between left and right.
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            To judge whether the int value is between left and right.
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            To judge whether the long value is between left and right.
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            To judge whether the float value is between left and right.
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            To judge whether the double value is between left and right.
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numbers.IsBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            To judge whether the decimal value is between left and right.
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.RegexUtils.RegexCache">
            <summary>
            Regex cache
            </summary>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexCache.Get(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Gets the already cached value for a key, or calculates the value and stores it.
            </summary>
            <param name="pattern">The pattern used to create the regular expression.</param>
            <param name="options">The options for regex.</param>
            <returns>The calculated or cached value.</returns>
        </member>
        <member name="T:Cosmos.RegexUtils.Regexs">
            <summary>
            Regex Utilities<br />
            表达式工具集
            </summary>
        </member>
        <member name="M:Cosmos.RegexUtils.Regexs.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:Cosmos.RegexUtils.Regexs.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件,比如是否忽略大小写</param>
        </member>
        <member name="T:Cosmos.RegexUtils.RegexTypes">
            <summary>
            This class is used to fake an enum. You'll be able to use it as an enum.
            Note: type save enum, found on stackoverflow: http://stackoverflow.com/a/424414/603309
            </summary>
        </member>
        <member name="P:Cosmos.RegexUtils.RegexTypes.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Cosmos.RegexUtils.RegexTypes.Value">
            <summary>
            Values
            </summary>
        </member>
        <member name="F:Cosmos.RegexUtils.RegexTypes.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:Cosmos.RegexUtils.RegexTypes.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:Cosmos.RegexUtils.RegexVerbalExpressions">
            <summary>
            Regex verbal expressions
            </summary>
        </member>
        <member name="P:Cosmos.RegexUtils.RegexVerbalExpressions.DefaultExpression">
            <summary>
            Returns a default instance of RegexVerbalExpressions
            having the Multiline option enabled
            </summary>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Add(Cosmos.RegexUtils.RegexTypes)">
            <summary>
            Add
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Add(System.String,System.Boolean)">
            <summary>
            Add
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.StartOfLine(System.Boolean)">
            <summary>
            Start of line
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.EndOfLine(System.Boolean)">
            <summary>
            End of line
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Then(System.String,System.Boolean)">
            <summary>
            Then
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Then(Cosmos.RegexUtils.RegexTypes)">
            <summary>
            Then
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Find(System.String)">
            <summary>
            Find
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Maybe(System.String,System.Boolean)">
            <summary>
            Maybe
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Maybe(Cosmos.RegexUtils.RegexTypes)">
            <summary>
            Maybe
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Anything">
            <summary>
            Anything
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.AnythingBut(System.String,System.Boolean)">
            <summary>
            Anything but...
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Something">
            <summary>
            Something
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.SomethingBut(System.String,System.Boolean)">
            <summary>
            Something but...
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Replace(System.String)">
            <summary>
            Replace
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.LineBreak">
            <summary>
            Line break
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Br">
            <summary>
            Br
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Tab">
            <summary>
            Tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Word">
            <summary>
            Word
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.AnyOf(System.String,System.Boolean)">
            <summary>
            Any of
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Any(System.String)">
            <summary>
            Any
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Range(System.Object[])">
            <summary>
            Range
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Multiple(System.String,System.Boolean)">
            <summary>
            Multiple
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Or(Cosmos.RegexUtils.RegexTypes)">
            <summary>
            Or
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Or(System.String,System.Boolean)">
            <summary>
            Or
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.BeginCapture">
            <summary>
            Begin capture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.BeginCapture(System.String)">
            <summary>
            Begin capture
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.EndCapture">
            <summary>
            End capture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.RepeatPrevious(System.Int32)">
            <summary>
            Repeat previous
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.RepeatPrevious(System.Int32,System.Int32)">
            <summary>
            Repeat previous
            </summary>
            <param name="n"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.AddModifier(System.Char)">
            <summary>
            Add modifier
            </summary>
            <param name="modifier"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.RemoveModifier(System.Char)">
            <summary>
            Remove modifier
            </summary>
            <param name="modifier"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.WithAnyCase(System.Boolean)">
            <summary>
            With any case
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.UseOneLineSearchOption(System.Boolean)">
            <summary>
            Use one lne search option
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.WithOptions(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            With options
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Sanitize(System.String)">
            <summary>
            Sanitize
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Test(System.String)">
            <summary>
            Test
            </summary>
            <param name="toTest"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.IsMatch(System.String)">
            <summary>
            Is match
            </summary>
            <param name="toTest"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.ToRegex">
            <summary>
            To regex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.ToString">
            <summary>
            To string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RegexUtils.RegexVerbalExpressions.Capture(System.String,System.String)">
            <summary>
            Capture
            </summary>
            <param name="toTest"></param>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Splitters.IFixedLengthSplitter">
            <summary>
            Fixed length splitter interface
            </summary>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.TrimResults">
            <summary>
            Trim results
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.TrimResults(System.Func{System.String,System.String})">
            <summary>
            Trim results
            </summary>
            <param name="trimFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.Limit(System.Int32)">
            <summary>
            Limit
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.WithKeyValueSeparator(System.Char)">
            <summary>
            With KeyValue separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.WithKeyValueSeparator(System.String)">
            <summary>
            With KeyValue separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.Split(System.String)">
            <summary>
            Split
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.Split``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.Split``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.Split``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.SplitToList(System.String)">
            <summary>
            Split to list
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.SplitToList``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split to list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.SplitToList``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split to list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IFixedLengthSplitter.SplitToList``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split to list
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Splitters.IMapSplitter">
            <summary>
            MapSplitter interface
            </summary>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.TrimResults">
            <summary>
            Trim results
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.TrimResults(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Trim results
            </summary>
            <param name="keyTrimFunc"></param>
            <param name="valueTrimFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.Limit(System.Int32)">
            <summary>
            Limit
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.Split(System.String)">
            <summary>
            Split
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.Split``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.Split``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.Split``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.SplitToDictionary(System.String)">
            <summary>
            Split to dictionary
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.SplitToDictionary``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split to dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.SplitToDictionary``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split to dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.IMapSplitter.SplitToDictionary``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split to dictionary
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Splitters.ISplitter">
            <summary>
            Splitter interface
            </summary>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.OmitEmptyStrings">
            <summary>
            Omit empty strings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.TrimResults">
            <summary>
            Trim results
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.TrimResults(System.Func{System.String,System.String})">
            <summary>
            Trim results
            </summary>
            <param name="trimFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.Limit(System.Int32)">
            <summary>
            Limit
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.WithKeyValueSeparator(System.Char)">
            <summary>
            With KeyValue separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.WithKeyValueSeparator(System.String)">
            <summary>
            With KeyValue separator
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.Split(System.String)">
            <summary>
            Split
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.Split``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.Split``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.Split``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.SplitToList(System.String)">
            <summary>
            Split to list
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.SplitToList``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split to list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.SplitToList``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split to list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.ISplitter.SplitToList``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split to list
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Splitters.Splitter">
            <summary>
            Splitter<br />
            字符串分割器
            </summary>
            <summary>
            Splitter<br />
            字符串分割器
            </summary>
            <summary>
            Splitter<br />
            字符串分割器
            </summary>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.OmitEmptyStrings">
            <summary>
            Omit empty string<br />
            移除空字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#WithKeyValueSeparator(System.String)">
            <summary>
            With KeyValue separator<br />
            设置键值对分隔符
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#WithKeyValueSeparator(System.Char)">
            <summary>
            With KeyValue separator<br />
            设置键值对分隔符
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#TrimResults">
            <summary>
            Trim results<br />
            修整结果两端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#TrimResults(System.Func{System.String,System.String})">
            <summary>
            Trim results<br />
            修整结果，按照指定的方法
            </summary>
            <param name="trimFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#Limit(System.Int32)">
            <summary>
            Limit<br />
            设置限制的值
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#Split(System.String)">
            <summary>
            Split<br />
            分割
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#Split``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#Split``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#Split``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#SplitToList(System.String)">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#SplitToList``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#SplitToList``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#ISplitter#SplitToList``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.On(System.String,System.String[])">
            <summary>
            On, to create a new Splitter instance.<br />
            On 操作，创建一个新的 Splitter 实例。
            </summary>
            <param name="on"></param>
            <param name="on2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.On(System.Text.RegularExpressions.Regex)">
            <summary>
            On, to create a new Splitter instance.<br />
            On 操作，创建一个新的 Splitter 实例。
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.OnPattern(System.String)">
            <summary>
            On, to create a new Splitter instance.<br />
            On 操作，创建一个新的 Splitter 实例。
            </summary>
            <param name="separatorPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.FixedLength(System.Int32)">
            <summary>
            Fixed length<br />
            固定长度
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#TrimResults">
            <summary>
            Trim results<br />
            修整结果两端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#TrimResults(System.Func{System.String,System.String})">
            <summary>
            Trim results<br />
            修整结果，按照指定的方法
            </summary>
            <param name="trimFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#Limit(System.Int32)">
            <summary>
            Limit<br />
            设置限制的值
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#WithKeyValueSeparator(System.String)">
            <summary>
            With KeyValue separator<br />
            设置键值对分隔符
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#WithKeyValueSeparator(System.Char)">
            <summary>
            With KeyValue separator<br />
            设置键值对分隔符
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#Split(System.String)">
            <summary>
            Split<br />
            分割
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#Split``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#Split``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#Split``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#SplitToList(System.String)">
            <summary>
            Split<br />
            分割
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#SplitToList``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#SplitToList``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IFixedLengthSplitter#SplitToList``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split to list<br />
            分割为列表
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#TrimResults">
            <summary>
            Trim results<br />
            修整结果两端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#TrimResults(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Trim results<br />
            修整结果，按照指定的方法
            </summary>
            <param name="keyTrimFunc"></param>
            <param name="valueTrimFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#Limit(System.Int32)">
            <summary>
            Limit<br />
            设置限制的值
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#Split``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#Split``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#Split(System.String)">
            <summary>
            Split<br />
            分割
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.Cosmos#Splitters#IMapSplitter#Split``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split<br />
            分割
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.SplitToDictionary(System.String)">
            <summary>
            Split to dictionary<br />
            分割为字典
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.SplitToDictionary``1(System.String,Cosmos.Serialization.IObjectSerializer)">
            <summary>
            Split to dictionary<br />
            分割为字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.SplitToDictionary``1(System.String,Cosmos.ITypeConverter{System.String,``0})">
            <summary>
            Split to dictionary<br />
            分割为字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Splitters.Splitter.SplitToDictionary``2(System.String,Cosmos.Serialization.IObjectSerializer,Cosmos.IObjectMapper)">
            <summary>
            Split to dictionary<br />
            分割为字典
            </summary>
            <typeparam name="TMiddle"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="originalString"></param>
            <param name="serializer"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Strings">
            <summary>
            String Utils<br />
            字符串工具
            </summary>
        </member>
        <member name="M:Cosmos.Strings.NullToEmpty(System.String)">
            <summary>
            Convert null to empty.<br />
            将 null 转换为 Empty
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.EmptyToNull(System.String)">
            <summary>
            Convert empty to null.<br />
            将 Empty 转换为 null
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.CommonPrefix(System.String,System.String)">
            <summary>
            Returns the common prefix.<br />
            从左到右，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.CommonSuffix(System.String,System.String)">
            <summary>
            Returns the common suffix.<br />
            从右到左，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.Repeat(System.String,System.Int32)">
            <summary>
            Repeat<br />
            重复指定次数的字符
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.Repeat(System.Char,System.Int32)">
            <summary>
            Repeat<br />
            重复指定次数的字符
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.PadStart(System.String,System.Int32,System.Char)">
            <summary>
            Padding left
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="appendChar"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Strings.PadEnd(System.String,System.Int32,System.Char)">
            <summary>
            Padding right
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="appendChar"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Try">
            <summary>
            Try
            </summary>
        </member>
        <member name="M:Cosmos.Try.Create``1(System.Func{``0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Try`1"/>.
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try.LiftValue``1(``0)">
            <summary>
            Lifts a value.
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try.LiftException``1(System.Exception)">
            <summary>
            Lifts
            </summary>
            <param name="ex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.TryExtensions">
            <summary>
            Extensions for Try
            </summary>
        </member>
        <member name="M:Cosmos.TryExtensions.Select``2(Cosmos.Try{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TryExtensions.SelectMany``2(Cosmos.Try{``0},System.Func{``0,Cosmos.Try{``1}})">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TryExtensions.SelectMany``3(Cosmos.Try{``0},System.Func{``0,Cosmos.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="convert"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TIntermediate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TryExtensions.Where``1(Cosmos.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Try`1">
            <summary>
            Try
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Try`1.IsFailure">
            <summary>
            Is failure
            </summary>
        </member>
        <member name="P:Cosmos.Try`1.IsSuccess">
            <summary>
            Is success
            </summary>
        </member>
        <member name="P:Cosmos.Try`1.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Cosmos.Try`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:Cosmos.Try`1.op_Equality(Cosmos.Try{`0},Cosmos.Try{`0})">
            <summary>
            ==
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.op_Inequality(Cosmos.Try{`0},Cosmos.Try{`0})">
            <summary>
            !=
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Try`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Try`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Try`1.Deconstruct(`0@,System.Exception@)">
            <summary>
            Deconstruct
            </summary>
            <param name="value"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.Try`1.ExceptionAs``1">
            <summary>
            Exception as
            </summary>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.Recover(System.Func{System.Exception,`0})">
            <summary>
            Recover
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.RecoverWith(System.Func{System.Exception,Cosmos.Try{`0}})">
            <summary>
            Recover with
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,``0})">
            <summary>
            Match
            </summary>
            <param name="whenValue"></param>
            <param name="whenException"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.Map``1(System.Func{`0,``0})">
            <summary>
            Map
            </summary>
            <param name="map"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.Tap(System.Action{`0},System.Action{System.Exception})">
            <summary>
            Tap
            </summary>
            <param name="successFunction"></param>
            <param name="failureFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Try`1.Bind``1(System.Func{`0,Cosmos.Try{``0}})">
            <summary>
            Bind
            </summary>
            <param name="bind"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Failure`1">
            <summary>
            Failure
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Failure`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Failure`1"/> class.
            </summary>
            <param name="exception">The exception to wrapp.</param>
        </member>
        <member name="P:Cosmos.Failure`1.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Failure`1.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Failure`1.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Failure`1.Value">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Failure`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Failure`1.Equals(Cosmos.Failure{`0})">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Failure`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Failure`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Failure`1.Deconstruct(`0@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Failure`1.Recover(System.Func{System.Exception,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Failure`1.RecoverWith(System.Func{System.Exception,Cosmos.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Failure`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Failure`1.Tap(System.Action{`0},System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Success`1">
            <summary>
            Success
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Success`1.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Success`1.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Success`1.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Success`1.Value">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.Equals(Cosmos.Success{`0})">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Success`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.Deconstruct(`0@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.Recover(System.Func{System.Exception,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.RecoverWith(System.Func{System.Exception,Cosmos.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Success`1.Tap(System.Action{`0},System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:DeepCopy.CopierGenerator`1">
            <summary>
            Generates copy delegates.
            </summary>
        </member>
        <member name="M:DeepCopy.CopierGenerator`1.CreateCopier(System.Type)">
            <summary>
            Gets a copier for the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>A copier for the provided type.</returns>
        </member>
        <member name="T:DeepCopy.CopyContext">
            <summary>
            Records details about copied objects.
            </summary>
        </member>
        <member name="M:DeepCopy.CopyContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Records <paramref name="copy"/> as a copy of <paramref name="original"/>.
            </summary>
            <param name="original">The original object.</param>
            <param name="copy">The copy of <paramref name="original"/>.</param>
        </member>
        <member name="M:DeepCopy.CopyContext.TryGetCopy(System.Object,System.Object@)">
            <summary>
            Returns the copy of <paramref name="original"/> if it has been copied or <see langword="null"/> if it has not yet been copied.
            </summary>
            <param name="original">The original object.</param>
            <param name="result">The copied object.</param>
            <returns>The copy of <paramref name="original"/> or <see langword="null"/> if no copy has been made.</returns>
        </member>
        <member name="M:DeepCopy.CopyContext.Reset">
            <summary>
            Resets this instance so that it can be reused.
            </summary>
        </member>
        <member name="T:DeepCopy.CopyPolicy">
            <summary>
            Methods for determining the copyability of types and fields.
            </summary>
        </member>
        <member name="M:DeepCopy.CopyPolicy.GetCopyableFields(System.Type)">
            <summary>
            Returns a sorted list of the copyable fields of the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>A sorted list of the fields of the provided type.</returns>
        </member>
        <member name="M:DeepCopy.CopyPolicy.IsImmutable(System.Type)">
            <summary>
            Returns true if the provided type is immutable, otherwise false.
            </summary>
            <param name="type">The type.</param>
            <returns>true if the provided type is immutable, otherwise false.</returns>
        </member>
        <member name="T:DeepCopy.CopyPolicy.FieldInfoComparer">
            <summary>
            A comparer for <see cref="T:System.Reflection.FieldInfo"/> which compares by name.
            </summary>
        </member>
        <member name="P:DeepCopy.CopyPolicy.FieldInfoComparer.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="M:DeepCopy.CopyPolicy.FieldInfoComparer.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="T:DeepCopy.DeepCopier">
            <summary>
            Methods for creating deep copies of objects.
            </summary>
        </member>
        <member name="M:DeepCopy.DeepCopier.Copy``1(``0)">
            <summary>
            Creates and returns a deep copy of the provided object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="original">The object to copy.</param>
            <returns>A deep copy of the provided object.</returns>
        </member>
        <member name="M:DeepCopy.DeepCopier.Copy``1(``0,DeepCopy.CopyContext)">
            <summary>
            Creates and returns a deep copy of the provided object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="original">The object to copy.</param>
            <param name="context">
            The copy context, providing referential integrity between multiple calls to this method.
            </param>
            <returns>A deep copy of the provided object.</returns>
        </member>
        <member name="T:DeepCopy.DeepCopyDelegate`1">
            <summary>
            Deep copier delegate.
            </summary>
            <param name="original">Original object to be deep copied.</param>
            <param name="context">The context.</param>
            <returns>Deep copy of the original object.</returns>
        </member>
        <member name="T:DeepCopy.Immutable">
            <summary>
            Helper class for creating immutable values.
            </summary>
        </member>
        <member name="M:DeepCopy.Immutable.Create``1(``0)">
            <summary>
            Returns an immutable wrapper over the provided value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value.</param>
            <returns>An immutable wrapper over the provided value.</returns>
        </member>
        <member name="T:DeepCopy.Immutable`1">
            <summary>
            Wrapper class for creating immutable values.
            </summary>
            <typeparam name="T">The wrapped type.</typeparam>
        </member>
        <member name="M:DeepCopy.Immutable`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:DeepCopy.Immutable`1"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:DeepCopy.Immutable`1.Value">
            <summary>
            Gets the value held by this instance.
            </summary>
        </member>
        <member name="T:DeepCopy.ImmutableAttribute">
            <summary>
            The Immutable attribute indicates that instances of the marked class or struct are never modified
            after they are created.
            </summary>
            <remarks>
            Note that this implies that sub-objects are also not modified after the instance is created.
            </remarks>
        </member>
        <member name="T:DeepCopy.MethodInfos">
            <summary>
            Holds references to methods which are used during copying.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.TryGetCopy">
            <summary>
            A reference to the <see cref="M:DeepCopy.CopyContext.TryGetCopy(System.Object,System.Object@)"/> method.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.RecordObject">
            <summary>
            A reference to the <see cref="M:DeepCopy.CopyContext.RecordCopy(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.CopyInner">
            <summary>
            A reference to <see cref="M:DeepCopy.DeepCopier.Copy``1(``0,DeepCopy.CopyContext)"/>
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.GetUninitializedObject">
            <summary>
            A reference to a method which returns an uninitialized object of the provided type.
            </summary>
        </member>
        <member name="F:DeepCopy.MethodInfos.GetTypeFromHandle">
            <summary>
            A reference to <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/>.
            </summary>
        </member>
        <member name="T:DeepCopy.ReferenceEqualsComparer">
            <inheritdoc />
        </member>
        <member name="P:DeepCopy.ReferenceEqualsComparer.Instance">
            <summary>
            Gets an instance of this class.
            </summary>
        </member>
        <member name="M:DeepCopy.ReferenceEqualsComparer.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DeepCopy.ReferenceEqualsComparer.System#Collections#Generic#IEqualityComparer{System#Object}#GetHashCode(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.BaseTypeExtensions">
            <summary>
            Base Type Extensions
            </summary>
            <summary>
            Base Type Extensions
            </summary>
            <summary>
            Base Type Extensions
            </summary>
            <summary>
            Base Type Extensions
            </summary>
            <summary>
            Base Type Extensions
            </summary>
            <summary>
            Base Type Extensions
            </summary>
            <summary>
            Base Type Extensions
            </summary>
        </member>
        <member name="M:System.BaseTypeExtensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Contained copy
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            Clear
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.ClearAll(System.Array)">
            <summary>
            Clear all
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.IndexOf(System.Array,System.Object)">
            <summary>
            Index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.LastIndexOf(System.Array,System.Object)">
            <summary>
            Last index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Last index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Last index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.WithinIndex(System.Array,System.Int32)">
            <summary>
            Within index
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            Within index
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.Reverse(System.Array)">
            <summary>
            Reverse
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
            Reverse
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Array)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.BinarySearch(System.Array,System.Object)">
            <summary>
            Binary Search
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            Binary Search
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
            Binary Search
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            Binary Search
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            Find all
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Block copy
            </summary>
            <param name="src"></param>
            <param name="srcOffset"></param>
            <param name="dst"></param>
            <param name="dstOffset"></param>
            <param name="count"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.ByteLength(System.Array)">
            <summary>
            Gets length of byte.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.GetByte(System.Array,System.Int32)">
            <summary>
            Gets byte
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetByte(System.Array,System.Int32,System.Byte)">
            <summary>
            Sets byte
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.BaseTypeExtensions.Max(System.Byte,System.Byte)">
            <summary>
            Gets max one.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.Min(System.Byte,System.Byte)">
            <summary>
            Gets min one.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.Resize(System.Byte[],System.Int32)">
            <summary>
            Resize
            </summary>
            <param name="this"></param>
            <param name="newSize"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            To base64 char array
            </summary>
            <param name="inArray"></param>
            <param name="offsetIn"></param>
            <param name="length"></param>
            <param name="outArray"></param>
            <param name="offsetOut"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
            <summary>
            To base64 char array
            </summary>
            <param name="inArray"></param>
            <param name="offsetIn"></param>
            <param name="length"></param>
            <param name="outArray"></param>
            <param name="offsetOut"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToBase64String(System.Byte[])">
            <summary>
            Convert byte[] to base64 string
            </summary>
            <param name="inArray"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Convert byte[] to base64 string
            </summary>
            <param name="inArray"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte[] to base64 string
            </summary>
            <param name="inArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            Convert byte[] to base64 string.
            </summary>
            <param name="inArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            Convert byte[] to <see cref="T:System.IO.MemoryStream"/>
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.GetNumericValue(System.Char)">
            <summary>
            Get numeric value
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.GetUnicodeCategory(System.Char)">
            <summary>
            Get unicode category
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToLower(System.Char)">
            <summary>
            To Lower
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
            To Lower
            </summary>
            <param name="c"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToLowerInvariant(System.Char)">
            <summary>
            To Lower invariant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsUpper(System.Char)">
            <summary>
            Is Upper
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
            To Upper
            </summary>
            <param name="c"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToUpperInvariant(System.Char)">
            <summary>
            To Upper invariant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToString(System.Char)">
            <summary>
            ToStrng
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ConvertToUtf32(System.Char,System.Char)">
            <summary>
            Convert to utf32
            </summary>
            <param name="highSurrogate"></param>
            <param name="lowSurrogate"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsSurrogate(System.Char)">
            <summary>
            Is Surrogate
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsSurrogatePair(System.Char,System.Char)">
            <summary>
            Is Surrogate Pair
            </summary>
            <param name="highSurrogate"></param>
            <param name="lowSurrogate"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsHighSurrogate(System.Char)">
            <summary>
            Is High Surrogate
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsLowSurrogate(System.Char)">
            <summary>
            Is Low Surrogate
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.Repeat(System.Char,System.Int32)">
            <summary>
            Repeat
            </summary>
            <param name="this"></param>
            <param name="repeatCount"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.In(System.Char,System.Char[])">
            <summary>
            In
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.NotIn(System.Char,System.Char[])">
            <summary>
            Not In
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Is WhiteSpace
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsControl(System.Char)">
            <summary>
            Is Control
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsDigit(System.Char)">
            <summary>
            Is Digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsLetter(System.Char)">
            <summary>
            Is Letter
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Is Letter or Digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsLower(System.Char)">
            <summary>
            Is Lower
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsNumber(System.Char)">
            <summary>
            Is Number
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsPunctuation(System.Char)">
            <summary>
            Is Punctuation
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsSeparator(System.Char)">
            <summary>
            Is Separator
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.IsSymbol(System.Char)">
            <summary>
            Is Symbol
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetDateTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间
            </summary>
            <param name="date"></param>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetDateTime(System.DateTime,System.TimeSpan)">
            <summary>
            设置时间
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetDateTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间
            </summary>
            <param name="date"></param>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetDateTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            设置时间
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetDateTime(System.DateTimeOffset,System.TimeSpan,System.TimeZoneInfo)">
            <summary>
            设置时间
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.BaseTypeExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            将时间转换为时间点
            </summary>
            <param name="localDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将时间转换为时间点
            </summary>
            <param name="localDateTime"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToLocalDateTime(System.DateTimeOffset)">
            <summary>
            将时间点转换为时间
            </summary>
            <param name="dateTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.ToLocalDateTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            将时间点转换为时间
            </summary>
            <param name="dateTimeUtc"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetTime(System.DateTime,System.Int32)">
            <summary>
            Set time<br />
            设置时间
            </summary>
            <param name="current"></param>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Set time<br />
            设置时间
            </summary>
            <param name="current"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set time<br />
            设置时间
            </summary>
            <param name="current"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseTypeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set time<br />
            设置时间
            </summary>
            <param name="current"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="millisecond"></param>
            <returns></returns>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>
            Stream extensions
            </summary>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Read all bytes
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
    </members>
</doc>
