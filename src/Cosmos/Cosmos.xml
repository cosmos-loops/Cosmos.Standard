<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos</name>
    </assembly>
    <members>
        <member name="T:Cosmos.BooleanExtensions">
            <summary>
            Boolean extensions
            </summary>
        </member>
        <member name="M:Cosmos.BooleanExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>
            If true...
            </summary>
            <param name="this"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.IfFalse(System.Boolean,System.Action)">
            <summary>
            If false...
            </summary>
            <param name="this"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.Ifttt(System.Boolean,System.Action,System.Action)">
            <summary>
            If this then that...
            </summary>
            <param name="condition"></param>
            <param name="this"></param>
            <param name="that"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.Ifttt``1(System.Boolean,System.Func{``0},System.Func{``0})">
            <summary>
            If this then that...
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="condition"></param>
            <param name="this"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BooleanExtensions.IfTrueThenThrow(System.Boolean,System.Exception)">
            <summary>
            If true then throw exception
            </summary>
            <param name="this"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.IfFalseThenThrow(System.Boolean,System.Exception)">
            <summary>
            If false then throw exception
            </summary>
            <param name="this"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.IfNullOrWhiteSpace(System.String,System.Action)">
            <summary>
            If null or whitespace then...
            </summary>
            <param name="string"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.IfNotNullNorWhiteSpace(System.String,System.Action)">
            <summary>
            If not null nor whitespace then...
            </summary>
            <param name="string"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.BooleanExtensions.ToBinary(System.Boolean)">
            <summary>
            Is binary
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.BooleanExtensions.ToString(System.Boolean,System.String,System.String)">
            <summary>
            If true then this, else that...
            </summary>
            <param name="this"></param>
            <param name="trueString"></param>
            <param name="falseString"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ByteExtensions">
            <summary>
            Byte extensions
            </summary>
        </member>
        <member name="M:Cosmos.ByteExtensions.Max(System.Byte,System.Byte)">
            <summary>
            Gets max one.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ByteExtensions.Min(System.Byte,System.Byte)">
            <summary>
            Gets min one.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ByteExtensions.Resize(System.Byte[],System.Int32)">
            <summary>
            Resize
            </summary>
            <param name="this"></param>
            <param name="newSize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ByteExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            Convert byte[] to <see cref="T:System.IO.MemoryStream"/>
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.ArrayExtensions">
            <summary>
            Cosmos <see cref="T:System.Array"/> extensions
            </summary>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            Clear
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.ClearAll(System.Array)">
            <summary>
            Clear all
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            Find all
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.IndexOf(System.Array,System.Object)">
            <summary>
            Index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.LastIndexOf(System.Array,System.Object)">
            <summary>
            Last index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Last index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Last index of
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.WithinIndex(System.Array,System.Int32)">
            <summary>
            Within index
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            Within index
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copy
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Contained copy
            </summary>
            <param name="sourceArray"></param>
            <param name="sourceIndex"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Block copy
            </summary>
            <param name="src"></param>
            <param name="srcOffset"></param>
            <param name="dst"></param>
            <param name="dstOffset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.ByteLength(System.Array)">
            <summary>
            Gets length of byte.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.GetByte(System.Array,System.Int32)">
            <summary>
            Gets byte
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.SetByte(System.Array,System.Int32,System.Byte)">
            <summary>
            Sets byte
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Array)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
            <param name="array"></param>
            <param name="items"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Reverse(System.Array)">
            <summary>
            Reverse
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Cosmos.Collections.ArrayExtensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
            Reverse
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="T:Cosmos.Conversions.Base32Conv">
            <summary>
            Base32 Conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.Base32Conv.ToBase32String(System.Byte[])">
            <summary>
            Convert from <see cref="T:System.String"/> to base32 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Conversions.Base32Conv.ToBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert from <see cref="T:System.String"/> to base32 <see cref="T:System.String"/>.
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base32Conv.FromBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert from base32 <see cref="T:System.String"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="base32String"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base32Conv.FromBase32StringToBytes(System.String)">
            <summary>
            Convert from base32 <see cref="T:System.String"/> to <see cref="T:System.Byte"/> array.
            </summary>
            <param name="base32String"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.Conversions.Base64Conv">
            <summary>
            Base64 Conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert from <see cref="T:System.String"/> to base64 <see cref="T:System.String"/>.
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.ToBase64String(System.Byte[])">
            <summary>
            Convert from <see cref="T:System.String"/> to base64 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert from base64 <see cref="T:System.String"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="base64String"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.FromBase64StringToBytes(System.String)">
            <summary>
            Convert from base64 <see cref="T:System.String"/> to <see cref="T:System.Byte"/> array.
            </summary>
            <param name="base64String"></param>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.ToBase64UrlString(System.String,System.Text.Encoding)">
            <summary>
            Convert from <see cref="T:System.String"/> to base64url <see cref="T:System.String"/>.
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.ToBase64UrlString(System.Byte[])">
            <summary>
            Convert from <see cref="T:System.String"/> to base64url <see cref="T:System.String"/>.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.FromBase64UrlString(System.String,System.Text.Encoding)">
            <summary>
            Convert from base64url <see cref="T:System.String"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="base64UrlString"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Cosmos.Conversions.Base64Conv.FromBase64UrlStringToBytes(System.String)">
            <summary>
            Convert from base64url <see cref="T:System.String"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="base64UrlString"></param>
        </member>
        <member name="T:Cosmos.Conversions.BinaryConv">
            <summary>
            Binary Conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.BinaryConv.ToDecimalism(System.String)">
            <summary>
            Convert from binary to decimalism.
            </summary>
            <example>in: 101110; out: 46</example>
            <param name="bin"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BinaryConv.ToHexadecimal(System.String)">
            <summary>
            Convert from binary to hexadecimal.
            </summary>
            <example>in: 101110; out: 2E</example>
            <param name="bin"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.ByteConv">
            <summary>
            Bytes Conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToASCII(System.Byte[])">
            <summary>
            Convert from bytes to ASCII <see cref="T:System.String"/>.
            </summary>
            <example>in: new byte[] {65, 66, 67}; out: ABC</example>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToBinary(System.Byte)">
            <summary>
            Convert from byte to binary.
            </summary>
            <example>in: (byte)128; out: 10000000</example>
            <param name="byte"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToDecimalism(System.Byte,System.Byte)">
            <summary>
            Convert high address 'h' and low address 'l' to decimalism.
            </summary>
            <example>in: (byte)65, (byte)66; out: 16706</example>
            <example>in: (byte)66, (byte)65; out: 16961</example>
            <param name="h">high address byte</param>
            <param name="l">low address byte</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToDecimalism(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Convert high address 'h' and low address 'l' to decimalism.
            </summary>
            <example>in: (byte)255, (byte)66; out: 65346</example>
            <example>in: (byte)66, (byte)255; out: -190</example>
            <param name="h">high address byte</param>
            <param name="l">low address byte</param>
            <param name="isRadix"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToHexadecimal(System.Byte)">
            <summary>
            Convert from byte to hexadecimal.
            </summary>
            <example>in: (byte)128; out: 80</example>
            <param name="byte"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToHexadecimal(System.Byte[])">
            <summary>
            Convert from bytes to hexadecimal.
            </summary>
            <example>in: new byte[] {65, 66, 67}; out: 414243</example>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ByteConv.ToHexadecimal(System.Byte,System.Byte)">
            <summary>
            Convert from high address 'h' and low address 'l' to hexadecimal.
            </summary>
            <example>in: (byte)65, (byte)66; out: 4142</example>
            <example>in: (byte)66, (byte)65; out: 4241</example>
            <param name="h">high address byte</param>
            <param name="l">low address byte</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.DecimalismConv">
            <summary>
            Decimalism Conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.DecimalismConv.ToBinary(System.Int32)">
            <summary>
            Convert from decimalism to binary.
            </summary>
            <example>in: 46; out: 101110</example>
            <param name="dec"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.DecimalismConv.ToHexadecimal(System.Int32)">
            <summary>
            Convert from decimal to hexadecimal.
            </summary>
            <example>in: 46; out: 2E</example>
            <param name="dec"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.DecimalismConv.ToHexadecimal(System.Int32,System.Int32)">
            <summary>
            Convert from decimal to hexadecimal.
            </summary>
            <example>in: 46, 4; out: 002E</example>
            <param name="dec"></param>
            <param name="formatLength"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.HexadecimalConv">
            <summary>
            Hexadecimal Conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.HexadecimalConv.ToDecimalism(System.String)">
            <summary>
            Convert from hexadecimal to decimalism.
            </summary>
            <example>in: 2E; out: 46</example>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.HexadecimalConv.ToBinary(System.String)">
            <summary>
            Convert from hexadecimal to binary.
            </summary>
            <example>in: 2E; out: 101110</example>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.HexadecimalConv.ToBytes(System.String)">
            <summary>
            Convert from hexadecimal to bytes.
            </summary>
            <example>in: 2E3D; out: result[0] is 46, result[1] is 61</example>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.HexadecimalConv.ToString(System.String,System.Text.Encoding)">
            <summary>
            Convert from hexadecimal to <see cref="T:System.String"/>.
            </summary>
            <param name="hex"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.HexadecimalConv.FromString(System.String,System.Text.Encoding)">
            <summary>
            Convert from <see cref="T:System.String"/> to hexadecimal.
            </summary>
            <example>in: A; out: 1000001</example>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.CosmosException">
            <summary>
            Cosmos base exception
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.EMPTY_FLAG">
            <summary>
            Empty flag
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.DEFAULT_ERROR_MESSAGE">
            <summary>
            Default error message for cosmos exception
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.DEFAULT_ERROR_CODE">
            <summary>
            Default error code for cosmos exception
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.DEFAULT_EXTEND_ERROR_CODE">
            <summary>
            Default extend error code for cosmos exception
            </summary>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor">
            <summary>
            Create a new cosmos exception instance.
            </summary>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance.
            </summary>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance.
            </summary>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance.
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new cosmos exception instance.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance.
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(Cosmos.Exceptions.ExceptionOptions)">
            <summary>
            Create a new cosmos exception instance.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Cosmos.CosmosException.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:Cosmos.CosmosException.Flag">
            <summary>
            Error flag
            </summary>
        </member>
        <member name="P:Cosmos.CosmosException.ExtraData">
            <summary>
            Extra data
            </summary>
        </member>
        <member name="M:Cosmos.CosmosException.GetFullMessage">
            <summary>
            Get full message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CosmosException.Throw">
            <summary>
            Throw me.
            </summary>
        </member>
        <member name="T:Cosmos.Date.TimeStamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.m_timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.m_datetime">
            <summary>
            Datetime
            </summary>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.TimeStamp"/>
            </summary>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.#ctor(System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.TimeStamp"/>
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.#ctor(System.DateTime)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.TimeStamp"/>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.ToDateTime">
            <summary>
            Get the corresponding time based on the timestamp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.ToTimestamp">
            <summary>
            Get timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.NowTimeStamp">
            <summary>
            Gets a Func for now
            </summary>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.UtcNowTimeStamp">
            <summary>
            Gets a Func for utc_now
            </summary>
        </member>
        <member name="T:Cosmos.Date.NoRepeatTimeStampFactory">
            <summary>
            No repeat TimeStamp factory
            </summary>
        </member>
        <member name="P:Cosmos.Date.NoRepeatTimeStampFactory.IncrementMs">
            <summary>
            Increment milliseconds.
            </summary>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetTimeStamp">
            <summary>
            Gets timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUtcTimeStamp">
            <summary>
            Gets timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetTimeStampObject">
            <summary>
            Gets TimeStamp object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUtcTimeStampObject">
            <summary>
            Gets utc TimeStamp object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUnixTimeStampObject">
            <summary>
            Gets unix TimeStamp object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUtcUnixTimeStampObject">
            <summary>
            Gets utc unix TimeStamp object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Date.UnixTimeStamp">
            <summary>
            Unix timestamp
            </summary>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.UnixTimeStamp"/>
            </summary>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.#ctor(System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.UnixTimeStamp"/>
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.#ctor(System.DateTime)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.UnixTimeStamp"/>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.ToDateTime">
            <summary>
            根据 Unix 时间戳，获取对应时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.ToTimestamp">
            <summary>
            获取 Unix 时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Date.UnixTimeStamp.NowUnixTimeStamp">
            <summary>
            Gets a func for unix now.
            </summary>
        </member>
        <member name="F:Cosmos.Date.UnixTimeStamp.UtcNowUnixTimeStamp">
            <summary>
            Gets a func for unix utc_now.
            </summary>
        </member>
        <member name="T:Cosmos.Dynamic.Exposed">
            <summary>
            Exposes hidden (private/protected/internal) members of an
            <see langword="object"/> or <see cref="T:System.Type"/> through a <see langword="dynamic"/> wrapper.
            </summary>
        </member>
        <member name="F:Cosmos.Dynamic.Exposed._value">
            <summary>
            The <see langword="object"/> that is being exposed.
            <see langword="null"/> if static members of a <see cref="T:System.Type"/> are being exposed.
            </summary>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Dynamic.Exposed"/> class. 
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Dynamic.Exposed"/> class. 
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="P:Cosmos.Dynamic.Exposed.SubjectType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the exposed object.
            </summary>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.From(System.Object)">
            <summary>
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.From(System.Type)">
            <summary>
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.New(System.Type)">
            <summary>
            Creates a new wrapper for accessing members of a new instance of <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of which an instance will have it's members exposed.
            </param>
            <returns>
            A new wrapper around a new instance of <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">
            The expression tree representation of the runtime value.
            </param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:Cosmos.Dynamic.MetaObject">
            <summary>
            Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.
            </summary>
        </member>
        <member name="F:Cosmos.Dynamic.MetaObject._isStatic">
            <summary>
            Should this <see cref="T:Cosmos.Dynamic.MetaObject"/> bind to <see langword="static"/> or instance methods and fields.
            </summary>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.#ctor(System.Linq.Expressions.Expression,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Dynamic.MetaObject"/> class.
            </summary>
            <param name="expression">
            The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"/> during the dynamic binding process.
            </param>
            <param name="value">
            The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject"/>.
            </param>
            <param name="staticBind">
            Should this MetaObject bind to <see langword="static"/> or instance methods and fields.
            </param>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="args">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances - arguments to the invoke member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
            <exception cref="T:System.MissingMemberException">
            There is an attempt to dynamically access a class member that does not exist.
            </exception>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Performs the binding of the dynamic get member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.GetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.SetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="value">
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the value for the set member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.GetMemberExpression(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Generates the <see cref="T:System.Linq.Expressions.Expression"/> for accessing a member by name.
            </summary>
            <param name="self">
            The <see cref="T:System.Linq.Expressions.Expression"/> for accessing the <see cref="T:Cosmos.Dynamic.Exposed"/> instance.
            </param>
            <param name="memberName">
            The member name.
            </param>
            <returns>
            <see cref="T:System.Linq.Expressions.MemberExpression"/> for accessing a member by name.
            </returns>
            <exception cref="T:System.MissingMemberException">
            </exception>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.ConvertExpressionType(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Coerces the expression type into the expected return type.
            </summary>
            <param name="expectedType">Type expeted at the dispatch site.</param>
            <param name="target">Expression to coerce.</param>
            <remarks>Dynamic dispatch expects a <see langword="void"/> method to return <see langword="null"/>.</remarks>
            <returns>Target expression coerced to the required type.</returns>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.GetBindingFlags">
            <summary>
            Returns <see cref="T:System.Reflection.BindingFlags"/> for member search.
            </summary>
            <returns>
            Static or instance flags depending on <see cref="F:Cosmos.Dynamic.MetaObject._isStatic"/>.
            </returns>
        </member>
        <member name="T:Cosmos.EqualityHelper`1">
            <summary>
            相等比较，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper[Person].CreateComparer(p => p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p => p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p => p.Birthday.Year);
            </example>
        </member>
        <member name="M:Cosmos.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            Create comparer
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create comparer
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionExtensions">
            <summary>
            Cosmos <see cref="T:System.Exception"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionExtensions.Unwrap(System.Exception,System.Type,System.Boolean)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <param name="untilType"></param>
            <param name="mayDerivedClass"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionExtensions.Unwrap``1(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionExtensions.ToUnwrappedString(System.Exception)">
            <summary>
            Unwrap and gets message<br />
            解包并返回消息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionExtensions.ToFullUnwrappedString(System.Exception)">
            <summary>
            Unwrap and gets full message<br />
            解包，尝试返回完整信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionHelper">
            <summary>
            Exception helper
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelper.PrepareForRethrow(System.Exception)">
            <summary>
            Prepare for rethrow
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionOptions">
            <summary>
            Options for cosmos exception
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.ExceptionOptions.EMPTY_FLAG">
            <summary>
            Empty flag
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_ERROR_MESSAGE">
            <summary>
            Default error message
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_EXTEND_ERROR_CODE">
            <summary>
            Default extend error code
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.Message">
            <summary>
            Gets for sets error message, default is <see cref="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_ERROR_MESSAGE"/>.
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.Flag">
            <summary>
            Gets or sets error flag, default is <see cref="F:Cosmos.Exceptions.ExceptionOptions.EMPTY_FLAG"/>.
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.ErrorCode">
            <summary>
            Gets or sets error code, default is <see cref="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_EXTEND_ERROR_CODE"/>.
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.InnerException">
            <summary>
            Gets or sets inner exception.
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.ExtraErrors">
            <summary>
            Gets or sets extra errors
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.Try">
            <summary>
            Try
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``1(System.Func{``0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>.
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFromTask``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Create for asynchronous functions.
            </summary>
            <param name="createFunctionAsync"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.LiftValue``1(``0)">
            <summary>
            Lifts a value.
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.LiftException``1(System.Exception)">
            <summary>
            Lifts
            </summary>
            <param name="ex"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.TryExtensions">
            <summary>
            Cosmos Try extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.Select``2(Cosmos.Exceptions.Try{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.SelectMany``2(Cosmos.Exceptions.Try{``0},System.Func{``0,Cosmos.Exceptions.Try{``1}})">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.SelectMany``3(Cosmos.Exceptions.Try{``0},System.Func{``0,Cosmos.Exceptions.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="convert"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TIntermediate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.Where``1(Cosmos.Exceptions.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.Try`1">
            <summary>
            Try
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.IsFailure">
            <summary>
            Is failure
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.IsSuccess">
            <summary>
            Is success
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetValue">
            <summary>
            Gets value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetValueAsync">
            <summary>
            Get value async
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue">
            <summary>
            Get safe value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(`0)">
            <summary>
            Get safe value
            </summary>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(System.Func{`0})">
            <summary>
            Get safe value
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(System.Func{System.Exception,`0})">
            <summary>
            Get safe value
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync">
            <summary>
            Get safe value async
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(`0)">
            <summary>
            Get safe value async
            </summary>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{`0})">
            <summary>
            Get safe value async
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{System.Exception,`0})">
            <summary>
            Get safe value async
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Get safe value async
            </summary>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{System.Exception,System.Threading.Tasks.Task{`0}})">
            <summary>
            Get safe value async
            </summary>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@)">
            <summary>
            Try get value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,`0)">
            <summary>
            Try get value
            </summary>
            <param name="value"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,System.Func{`0})">
            <summary>
            Try get value
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,System.Func{System.Exception,`0})">
            <summary>
            Try get value
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.op_Equality(Cosmos.Exceptions.Try{`0},Cosmos.Exceptions.Try{`0})">
            <summary>
            ==
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.op_Inequality(Cosmos.Exceptions.Try{`0},Cosmos.Exceptions.Try{`0})">
            <summary>
            !=
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Deconstruct(`0@,System.Exception@)">
            <summary>
            Deconstruct
            </summary>
            <param name="value"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.ExceptionAs``1">
            <summary>
            Exception as
            </summary>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Recover(System.Func{System.Exception,`0})">
            <summary>
            Recover
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.RecoverWith(System.Func{System.Exception,Cosmos.Exceptions.Try{`0}})">
            <summary>
            Recover with
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,``0})">
            <summary>
            Match
            </summary>
            <param name="whenValue"></param>
            <param name="whenException"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Map``1(System.Func{`0,``0})">
            <summary>
            Map
            </summary>
            <param name="map"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Tap(System.Action{`0},System.Action{System.Exception})">
            <summary>
            Tap
            </summary>
            <param name="successFunction"></param>
            <param name="failureFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Bind``1(System.Func{`0,Cosmos.Exceptions.Try{``0}})">
            <summary>
            Bind
            </summary>
            <param name="bind"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.Failure`1">
            <summary>
            Failure
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Exceptions.Failure`1"/> class.
            </summary>
            <param name="exception">The exception to wrapp.</param>
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.Value">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Equals(Cosmos.Exceptions.Failure{`0})">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Deconstruct(`0@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Recover(System.Func{System.Exception,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.RecoverWith(System.Func{System.Exception,Cosmos.Exceptions.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Tap(System.Action{`0},System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Exceptions.Success`1">
            <summary>
            Success
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.Value">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Equals(Cosmos.Exceptions.Success{`0})">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Deconstruct(`0@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Recover(System.Func{System.Exception,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.RecoverWith(System.Func{System.Exception,Cosmos.Exceptions.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Tap(System.Action{`0},System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Expressions.CosmosExpressionExtensions">
            <summary>
            public <see cref="T:System.Linq.Expressions.Expression"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.CosmosExpressionExtensions.CreateGetPropertyExpression(System.Reflection.PropertyInfo)">
            <summary>
            Create get property expression
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.CosmosExpressionExtensions.CreateGetPropertyExpression(System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create get property expression
            </summary>
            <param name="propertyInfo"></param>
            <param name="parameterExpression"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Expressions.CosmosExpressionExtensions.CreateGetPropertyLambdaExpression``2(System.Reflection.PropertyInfo)">
            <summary>
            Create get property lambda expression
            </summary>
            <param name="propertyInfo"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.CosmosExpressionExtensions.CreateGetPropertyLambdaExpression``2(System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create get property lambda expression
            </summary>
            <param name="propertyInfo"></param>
            <param name="parameterExpression"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.Expressions.LambdaExtensions">
            <summary>
            Lambda extensions
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Operation(System.Linq.Expressions.Expression,Cosmos.Queries.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="T:Cosmos.Expressions.Lambdas">
            <summary>
            Lambda Utils<br />
            Lambda 工具集
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式,范例1：t => t.Name == "A" ，结果1。
            范例2：t => t.Name == "A" &amp;&amp; t.Age =1 ，结果2。</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Constant(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            获取常量表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.CreateParameter``1">
            <summary>
            创建参数
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Starts``1(System.String,System.String)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Ends``1(System.String,System.String)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.ParsePredicate``1(System.String,System.Object,Cosmos.Queries.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:Cosmos.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="T:Cosmos.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化谓词表达式生成器
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Cosmos.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.Append(System.String,Cosmos.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
        </member>
        <member name="T:Cosmos.Finders.BaseFinder`1">
            <summary>
            Base finder
            </summary>
        </member>
        <member name="F:Cosmos.Finders.BaseFinder`1.ItemsCache">
            <summary>
            Cached items. <br />
            已缓存的项目
            </summary>
        </member>
        <member name="F:Cosmos.Finders.BaseFinder`1.Found">
            <summary>
            Mark whether the search has been completed.<br />
            标记是否已完成查找。
            </summary>
        </member>
        <member name="M:Cosmos.Finders.BaseFinder`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.BaseFinder`1.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.BaseFinder`1.FindAllItems">
            <summary>
            Perform search work for all items. <br />
            执行所有项目的查找工作。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Finders.IFinder`1">
            <summary>
            Interface for finder
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Cosmos.Finders.IFinder`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Find items based on specified conditions. <br />
            根据指定的条件查找项目。
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.IFinder`1.FindAll(System.Boolean)">
            <summary>
            Find all items. <br />
            查找所有项目。
            </summary>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.GuidExtensions">
            <summary>
            Guid extensions
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.GuidExtensions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="M:Cosmos.IdUtils.GuidExtensions.IsNullOrEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="M:Cosmos.IdUtils.StringIdentifiers.ToValidIdentifier(System.String)">
            <summary>
            To valid identifier
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.InterlockedUtil">
            <summary>
            Interlocked util
            </summary>
        </member>
        <member name="M:Cosmos.InterlockedUtil.Read(System.Int32@)">
            <summary>
            Read
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.InterlockedUtil.Read``1(``0@)">
            <summary>
            Read
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IO.Buffers.BinaryDigitReader">
            <summary>
            Bit Reader
            </summary>
        </member>
        <member name="T:Cosmos.IO.Buffers.BinaryDigitSwapper">
            <summary>
            Bit Swapper
            </summary>
        </member>
        <member name="T:Cosmos.IO.Buffers.BinaryDigitWriter">
            <summary>
            Bit Writer
            </summary>
        </member>
        <member name="T:Cosmos.IO.CosmosStreamExtensions">
            <summary>
            Cosmos <see cref="T:System.IO.Stream"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TrySeek(System.IO.Stream,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Try seek
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Read all bytes
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TryRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Try read
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TryReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Try read async
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TryReadByte(System.IO.Stream)">
            <summary>
            Try read byte
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TrySetReadTimeout(System.IO.Stream,System.Int32)">
            <summary>
            Try set read timeout
            </summary>
            <param name="stream"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TrySetReadTimeout(System.IO.Stream,System.TimeSpan)">
            <summary>
            Try set read timeout
            </summary>
            <param name="stream"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TryWrite(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Try write
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TryWriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Try write async
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TryWriteByte(System.IO.Stream,System.Byte)">
            <summary>
            Try write byte
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TrySetWriteTimeout(System.IO.Stream,System.Int32)">
            <summary>
            Try set write timeout
            </summary>
            <param name="stream"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.CosmosStreamExtensions.TrySetWriteTimeout(System.IO.Stream,System.TimeSpan)">
            <summary>
            Try set write timeout
            </summary>
            <param name="stream"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Numeric.Numbers">
            <summary>
            Number Utilities
            </summary>
            <summary>
            Number Utilities
            </summary>
            <summary>
            Number Utilities
            </summary>
            <summary>
            Number Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetRangeBetween(System.Int32,System.Int32)">
            <summary>
            Get members between min value and max value (include min and max).
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetRangeBetween(System.Int64,System.Int64)">
            <summary>
            Get members between min value and max value (include min and max).
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.FixZero(System.Double)">
            <summary>
            Shortcut for returning true zero if a double tolerance floating point value is considered zero (within epsilon tolerance).<br />
            如果将双公差浮点值视为零（在ε公差内），则返回真零的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetDecimalPlaces(System.Double)">
            <summary>
            Returns the number of decimal places before last zero digit.<br />
            返回最后零位之前的小数位数。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetSumAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetProductAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetSumUsingIntegers(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by using integer math.<br />
            通过使用整数数学来确保加法公差。
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNaN(System.Double)">
            <summary>
            Is NaN
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNaN(System.Single)">
            <summary>
            Is NaN
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsDefaultValue(System.Double)">
            <summary>
            Is default
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsZeroValue(System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is considered zero (within epsilon tolerance).
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsZeroValue(System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within epsilon tolerance).
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearZeroValue(System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within provided tolerance).
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.Single,System.Single,System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.Double,System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double precision floating point value is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsRelativeNearEqual(System.Double,System.Double,System.UInt32)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Double,System.Double,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Single,System.Single,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Shortcut for validating a if a potential floating point value is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDecimal(System.Single)">
            <summary>
            Accurate way to convert float to decimal by converting to string first.  Avoids tolerance issues.<br />
            通过先转换为字符串将浮点数转换为小数的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Single,System.Int32)">
            <summary>
            Accurate way to convert float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别来将 float 转换为 double 的准确方法。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Single)">
            <summary>
            Accurate way to convert float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串将 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Nullable{System.Single})">
            <summary>
            Accurate way to convert possible float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串来将可能的 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Nullable{System.Single},System.Int32)">
            <summary>
            Accurate way to convert a possible float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别，将可能的浮点数转换为双精度值的准确方法。
            </summary>
        </member>
        <member name="T:Cosmos.Numeric.NumberExtensions">
            <summary>
            Extensions for number utilities
            </summary>
            <summary>
            Extensions for number utilities
            </summary>
            <summary>
            Extensions for number utilities
            </summary>
            <summary>
            Extensions for number utilities
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.FixZero(System.Double)">
            <summary>
            Shortcut for returning true zero if a double tolerance floating point value is considered zero (within epsilon tolerance).<br />
            如果将双公差浮点值视为零（在ε公差内），则返回真零的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.DecimalPlaces(System.Double)">
            <summary>
            Returns the number of decimal places before last zero digit.<br />
            返回最后零位之前的小数位数。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.SumAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ProductAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.SumUsingIntegers(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by using integer math.<br />
            通过使用整数数学来确保加法公差。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsDefault(System.Double)">
            <summary>
            Is default
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsZero(System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is considered zero (within epsilon tolerance).
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsZero(System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within epsilon tolerance).
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearZero(System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within provided tolerance).
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearEqual(System.Single,System.Single,System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearEqual(System.Double,System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double precision floating point value is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsRelativeNearEqual(System.Double,System.Double,System.UInt32)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Double,System.Double,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Single,System.Single,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance.
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDecimal(System.Single)">
            <summary>
            Accurate way to convert float to decimal by converting to string first.  Avoids tolerance issues.<br />
            通过先转换为字符串将浮点数转换为小数的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Single,System.Int32)">
            <summary>
            Accurate way to convert float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别来将 float 转换为 double 的准确方法。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Single)">
            <summary>
            Accurate way to convert float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串将 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Nullable{System.Single})">
            <summary>
            Accurate way to convert possible float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串来将可能的 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Nullable{System.Single},System.Int32)">
            <summary>
            Accurate way to convert a possible float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别，将可能的浮点数转换为双精度值的准确方法。
            </summary>
        </member>
        <member name="T:Cosmos.Numeric.NumericConstants">
            <summary>
            Number constants
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.ZERO">
            <summary>
            Zero
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.ONE">
            <summary>
            One
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.INT_MAX">
            <summary>
            Max value of Int32.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.INT_MIN">
            <summary>
            Min value of Int32.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.LONG_MAX">
            <summary>
            Max value of Int64.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.LONG_MIN">
            <summary>
            Min value of Int64.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.FLOAT_MAX">
            <summary>
            Max value of float.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.FLOAT_MIN">
            <summary>
            Min value of float.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DOUBLE_MAX">
            <summary>
            Max value of double.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DOUBLE_MIN">
            <summary>
            Min value of double.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DECIMAL_MAX">
            <summary>
            Max value of decimal.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DECIMAL_MIN">
            <summary>
            Min value of decimal.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.SHORT_MAX">
            <summary>
            Max value of short.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.SHORT_MIN">
            <summary>
            Min value of short.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.USHORT_MAX">
            <summary>
            Max value of ushort.
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.USHORT_MIN">
            <summary>
            Min value of ushort.
            </summary>
        </member>
        <member name="T:Cosmos.ObjectExtensions">
            <summary>
            Object extensions
            </summary>
        </member>
        <member name="M:Cosmos.ObjectExtensions.As``1(System.Object)">
            <summary>
            As
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOr``1(System.Object,``0)">
            <summary>
            As or...
            </summary>
            <param name="this"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object)">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,``0)">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,System.Func{``0})">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            As or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAs``1(System.Object,``0@)">
            <summary>
            Try as
            </summary>
            <param name="this"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOr``1(System.Object,``0,``0@)">
            <summary>
            Try as or
            </summary>
            <param name="this"></param>
            <param name="defaultVal"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOrDefault``1(System.Object,``0,``0@)">
            <summary>
            Try as or default
            </summary>
            <param name="this"></param>
            <param name="defaultValue"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOrDefault``1(System.Object,System.Func{``0},``0@)">
            <summary>
            Try as or default
            </summary>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOrDefault``1(System.Object,System.Func{System.Object,``0},``0@)">
            <summary>
            Try as or default
            </summary>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn(System.Byte,System.Byte[])">
            <summary>
            Is On
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn(System.Int16,System.Int16[])">
            <summary>
            Is On
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,``0[])">
            <summary>
            Is On
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is On
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,System.Collections.Generic.HashSet{``0})">
            <summary>
            Is On
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOnIgnoreCase(System.String,System.String[])">
            <summary>
            Is On and ignore case
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Queries.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Equal">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.NotEqual">
            <summary>
            NotEqual
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Greater">
            <summary>
            Greater
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.GreaterEqual">
            <summary>
            GreaterEqual
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Less">
            <summary>
            Less
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.LessEqual">
            <summary>
            LessEqual
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Starts">
            <summary>
            Starts
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Ends">
            <summary>
            Ends
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="T:Cosmos.RandomExtensions">
            <summary>
            Random extensions<br />
            随机数扩展方法
            </summary>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextBool(System.Random)">
            <summary>
            Random returns true or false.<br />
            随机返回 True 或 False
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            Random returns a member of the given enum<br />
            随机返回一个指定的枚举对象的成员
            </summary>
            <typeparam name="T"> 枚举 </typeparam>
            <param name="random"></param>
            <returns> 枚举对象的成员 </returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="random"></param>
            <param name="length"> 字节长度 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextUInt16(System.Random)">
            <summary>
            随机返回一个无符号八位整数。
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextInt16(System.Random)">
            <summary>
            随机返回一个有符号十六位整数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextFloat(System.Random)">
            <summary>
            随机返回一个单精度浮点数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            在指定范围内随机返回一个时间
            </summary>
            <param name="random">  </param>
            <param name="minValue"> 时间起始 </param>
            <param name="maxValue"> 时间截止 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            随机返回一个时间
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.OneOf``1(System.Random,``0[])">
            <summary>
            随机获得一个指定范围的结果
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeClass">
            <summary>
            Type clazz
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.VoidClazz">
            <summary>
            Gets clazz for void.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ObjectClazz">
            <summary>
            Gets clazz for object.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ObjectArrayClazz">
            <summary>
            Gets clazz for object array
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ByteClazz">
            <summary>
            Gets clazz for byte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ByteNullableClazz">
            <summary>
            Gets clazz for nullable byte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ByteArrayClazz">
            <summary>
            Gets clazz for byte array
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SByteClazz">
            <summary>
            Gets clazz for sbyte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SByteNullableClazz">
            <summary>
            Gets clazz for nullable sbyte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int16Clazz">
            <summary>
            Gets clazz for int16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int16NullableClazz">
            <summary>
            Gets clazz for nullable int16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt16Clazz">
            <summary>
            Gets clazz for uint16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt16NullableClazz">
            <summary>
            Gets clazz for nullable uint16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int32Clazz">
            <summary>
            Gets clazz for int32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int32NullableClazz">
            <summary>
            Gets clazz for nullable int32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt32Clazz">
            <summary>
            Gets clazz for uint32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt32NullableClazz">
            <summary>
            Gets clazz for nullable uint32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int64Clazz">
            <summary>
            Gets clazz for int64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int64NullableClazz">
            <summary>
            Gets clazz for nullable int64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt64Clazz">
            <summary>
            Gets clazz for uint64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt64NullableClazz">
            <summary>
            Gets clazz for nullable uint64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ShortClazz">
            <summary>
            Gets clazz for short
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ShortNullableClazz">
            <summary>
            Gets clazz for nullable short
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UShortClazz">
            <summary>
            Gets clazz for ushort
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UShortNullableClazz">
            <summary>
            Gets clazz for nullable ushort
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.IntClazz">
            <summary>
            Gets clazz for int
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.IntNullableClazz">
            <summary>
            Gets clazz for nullable int
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UIntClazz">
            <summary>
            Gets clazz for uint
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UIntNullableClazz">
            <summary>
            Gets clazz for nullable uint
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.LongClazz">
            <summary>
            Gets clazz for long
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.LongNullableClazz">
            <summary>
            Gets clazz for nullable long
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ULongClazz">
            <summary>
            Gets clazz for ulong
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ULongNullableClazz">
            <summary>
            Gets clazz for nullable ulong
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FloatClazz">
            <summary>
            Gets clazz for float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FloatNullableClazz">
            <summary>
            Gets clazz for nullable float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SingleClazz">
            <summary>
            Gets clazz for float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SingleNullableClazz">
            <summary>
            Gets clazz for nullable float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DoubleClazz">
            <summary>
            Gets clazz for double
            </summary>
            <summary>
            Gets clazz for nullable decimal
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DoubleNullableClazz">
            <summary>
            Gets clazz for nullable double
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DecimalClazz">
            <summary>
            Gets clazz for decimal
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DecimalNullableClazz">
            <summary>
            Gets clazz for nullable decimal
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.StringClazz">
            <summary>
            Gets clazz for string
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeClazz">
            <summary>
            Gets clazz for DateTime
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeNullableClazz">
            <summary>
            Gets clazz for nullable DateTime
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeOffsetClazz">
            <summary>
            Gets clazz for DateTimeOffset
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeOffsetNullableClazz">
            <summary>
            Gets clazz for nullable DateTimeOffset
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.TimeSpanClazz">
            <summary>
            Gets clazz for TimeSpan
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.TimeSpanNullableClazz">
            <summary>
            Gets clazz for nullable TimeSpan
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GuidClazz">
            <summary>
            Gets clazz for guid.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GuidNullableClazz">
            <summary>
            Gets clazz for nullable guid.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.BooleanClazz">
            <summary>
            Gets clazz for bool.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.BooleanNullableClazz">
            <summary>
            Gets clazz for nullable bool.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.CharClazz">
            <summary>
            Gets clazz for char.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.CharNullableClazz">
            <summary>
            Gets clazz for nullable char.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.EnumClazz">
            <summary>
            Gets clazz for Enum.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ValueTupleClazz">
            <summary>
            Gets clazz for ValueTuple
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.TaskClazz">
            <summary>
            Gets clazz for Task
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericTaskClazz">
            <summary>
            Gets clazz for Generic Task
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ValueTaskClazz">
            <summary>
            Gets clazz for ValueTask
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericValueTaskClazz">
            <summary>
            Gets clazz for Generic ValueTask
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ListClazz">
            <summary>
            Gets clazz for List
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericListClazz">
            <summary>
            Gets clazz for Generic List
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.NullableClazz">
            <summary>
            Gets clazz for Nullable type
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericNullableClazz">
            <summary>
            Gets clazz for Generic Nullable type
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FormattableClazz">
            <summary>
            Gets clazz for IFormattable
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FormatProviderClazz">
            <summary>
            Gets clazz for IFormatProvider
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeConv">
            <summary>
            Type conversion Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeConv.GetNonNullableType(System.Type)">
            <summary>
            Convert nullable type to underlying type. <br />
            将可为空的类型转换为基础类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeConv.GetNonNullableType``1">
            <summary>
            Convert nullable type to underlying type. <br />
            将可为空的类型转换为基础类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.ReflectionOptions">
            <summary>
            Reflection options <br />
            反射选项
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.ReflectionAmbiguousOptions">
            <summary>
            Reflection Ambiguous options <br />
            反射歧义选项
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeReflections">
            <summary>
            Reflection Utilities.
            </summary>
            <summary>
            Reflection Utilities.
            </summary>
            <summary>
            Reflection Utilities.
            </summary>
            <summary>
            Reflection Utilities.
            </summary>
            <summary>
            Reflection Utilities.
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.MemberInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.ParameterInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            Obtain all Attribute instances from the MemberInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Obtain all Attribute instances from the ParameterInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain all Attribute instances from the MemberInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain all Attribute instances from the ParameterInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsImplementationOfGenericType(System.Type,System.Type,System.Type@,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="sourceType">The given type</param>
            <param name="parentGenericType">The generic type</param>
            <param name="genericType"></param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsImplementationOfGenericType(System.Type,System.Type,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="sourceType">The given type</param>
            <param name="parentGenericType">The generic type</param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsImplementationOfGenericType``2(System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="genericArguments"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TGenericParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeFromGenericType(System.Type,System.Type)">
            <summary>
            Get the original <see cref="!:sourceType"/>. <br />
            When type inherits from genericType, returns that type.
            </summary>
            <param name="sourceType"></param>
            <param name="parentGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeFromGenericType``2">
            <summary>
            Get the original <see cref="!:TSource"/>. <br />
            When type inherits from genericType, returns that type.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TGenericParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeArgsFromGenericType(System.Type,System.Type)">
            <summary>
            Get the original <see cref="!:sourceType"/>. <br />
            When type inherits from genericType, gets all generic arguments in the <see cref="!:parentGenericType"/> corresponding to the <see cref="!:sourceType"/>.
            </summary>
            <param name="sourceType"></param>
            <param name="parentGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeArgsFromGenericType``2">
            <summary>
            Get the original <see cref="!:TSource"/>. <br />
            When type inherits from genericType, gets all generic arguments in the <see cref="!:TGenericParent"/> corresponding to the <see cref="!:TSource"/>.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TGenericParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsInterfaceDefined(System.Type,System.Type,Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsInterfaceDefined``1(System.Type,Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsBoolean(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a Boolean type.<br />
            判断给定的 MemberInfo 元信息是否为布尔类型。
            </summary>
            <param name="isOptions"></param>
            <param name="member">成员</param>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsDateTime(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a datetime.<br />
            判断给定的 MemberInfo 元信息是否为 DateTime 类型。
            </summary>
            <param name="isOptions"></param>
            <param name="member">成员</param>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsNumeric(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a numeric type.<br />
            判断给定的 MemberInfo 元信息是否为数字类型。
            </summary>
            <param name="member">成员</param>
            <param name="isOptions"></param>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsEnum(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is an enum type.<br />
            判断给定的 MemberInfo 元信息是否为枚举类型。
            </summary>
            <param name="member"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsCollection(System.Reflection.MemberInfo)">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            Determine whether the current <see cref="!:sourceType"/> is derived from the generic class <see cref="!:parentType"/>
            or is an implementation of the generic interface <see cref="!:parentType"/>. <br />
            判断当前类型 <see cref="!:sourceType"/> 是否派生自泛型类 <see cref="!:parentType"/>，或为泛型接口 <see cref="!:parentType"/> 的实现。
            </summary>
            <param name="parentType"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsGenericAssignableFrom``1(System.Type)">
            <summary>
            Determine whether the current <see cref="!:TSource"/> is derived from the generic class <see cref="!:parentType"/>
            or is an implementation of the generic interface <see cref="!:parentType"/>. <br />
            判断当前类型 <see cref="!:TSource"/> 是否派生自泛型类 <see cref="!:parentType"/>，或为泛型接口 <see cref="!:parentType"/> 的实现。
            </summary>
            <param name="parentType"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsImplementationOfGenericType(System.Type,System.Type)">
            <summary>
            Determine whether the current <see cref="!:sourceType"/> is derived from the generic class <see cref="!:parentType"/>
            or is an implementation of the generic interface <see cref="!:parentType"/>. <br />
            判断当前类型 <see cref="!:sourceType"/> 是否派生自泛型类 <see cref="!:parentType"/>，或为泛型接口 <see cref="!:parentType"/> 的实现。
            </summary>
            <param name="sourceType">给定类型</param>
            <param name="parentType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsImplementationOfGenericType``1(System.Type)">
            <summary>
            Determine whether the current <see cref="!:sourceType"/> is derived from the generic class <see cref="!:TParent"/>
            or is an implementation of the generic interface <see cref="!:TParent"/>. <br />
            判断当前类型 <see cref="!:sourceType"/> 是否派生自泛型类 <see cref="!:TParent"/>，或为泛型接口 <see cref="!:TParent"/> 的实现。
            </summary>
            <param name="sourceType"></param>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.Types">
            <summary>
            Type Utilities
            </summary>
            <summary>
            Type Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsTupleType(System.Type,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="type"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsTupleType``1(Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsTupleType``1(``0,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a tuple type.<br />
            判断给定的对象是否为元组类型
            </summary>
            <param name="value"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNumericType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNumericType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNumericType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a numeric type.<br />
            判断给定的对象是否为数字类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNullableType(System.Type)">
            <summary>
            Determine whether the given type is a nullable type. <br />
            判断给定的类型是否为可空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNullableType``1">
            <summary>
            Determine whether the given type is a nullable type. <br />
            判断给定的类型是否为可空类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNullableType``1(``0)">
            <summary>
            Determine whether the given object is a nullable type. <br />
            判断给定的对象是否为可空类型。
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsEnumType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is enum type
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsEnumType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is enum type
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsEnumType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is enum type
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsCollectionType(System.Type)">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsCollectionType``1">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsCollectionType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a collection or array type.<br />
            判断给定的对象是否为集合或数组类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined(System.Type,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined``1(System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined``2(Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined``2(``0,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="value"></param>
            <param name="options"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``1(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <typeparam name="T">Special type T</typeparam>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``2(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``3(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``4(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``5(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``6(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``7(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``8(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``9(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``10(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``11(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``12(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``13(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``14(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``15(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``16(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of(System.Object[],Cosmos.Reflection.TypeOfOptions)">
            <summary>
            According to the given object, return its corresponding type. <br />
            根据给定的对象，返回其对应的类型。
            </summary>
            <param name="objects">Object array</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Singleton">
            <summary>
            Provide a unified singleton management portal.
            </summary>
        </member>
        <member name="P:Cosmos.Singleton.AllSingletons">
            <summary>
            All singleton objects
            </summary>
        </member>
        <member name="T:Cosmos.Singleton`1">
            <summary>
            Provide a unified singleton management portal and a copy of itself.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Singleton`1.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="T:Cosmos.SingletonList`1">
            <summary>
            Provide a unified singleton management portal and a copy of itself.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.SingletonList`1.Instance">
            <summary>
            Get a singleton of the specified type T
            </summary>
        </member>
        <member name="T:Cosmos.SingletonDictionary`2">
            <summary>
            Provide a unified singleton management portal and a copy of itself
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Cosmos.SingletonDictionary`2.Instance">
            <summary>
            Get a singleton of the specified type T
            </summary>
        </member>
        <member name="M:Cosmos.Text.ByteBase32Extensions.ToBase32Bytes(System.Byte[],System.Text.Encoding)">
            <summary>
            Convert normal byte normal to base32 byte array
            </summary>
            <param name="bytes"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase32Extensions.ToBase32String(System.Byte[])">
            <summary>
            Convert byte[] to base32 string
            </summary>
            <param name="inArray"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64Bytes(System.Byte[],System.Text.Encoding)">
            <summary>
            Convert normal byte normal to base64 byte array
            </summary>
            <param name="bytes"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            To base64 char array
            </summary>
            <param name="inArray"></param>
            <param name="offsetIn"></param>
            <param name="length"></param>
            <param name="outArray"></param>
            <param name="offsetOut"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
            <summary>
            To base64 char array
            </summary>
            <param name="inArray"></param>
            <param name="offsetIn"></param>
            <param name="length"></param>
            <param name="outArray"></param>
            <param name="offsetOut"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64String(System.Byte[])">
            <summary>
            Convert byte[] to base64 string
            </summary>
            <param name="inArray"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Convert byte[] to base64 string
            </summary>
            <param name="inArray"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte[] to base64 string
            </summary>
            <param name="inArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.ByteBase64Extensions.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            Convert byte[] to base64 string.
            </summary>
            <param name="inArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.CharExtensions">
            <summary>
            Char extensions
            </summary>
        </member>
        <member name="M:Cosmos.Text.CharExtensions.IsBetween(System.Char,System.Char,System.Char)">
            <summary>
            Is special char between min and max
            </summary>
            <param name="char"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharExtensions.In(System.Char,System.Char[])">
            <summary>
            In
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharExtensions.NotIn(System.Char,System.Char[])">
            <summary>
            Not In
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharExtensions.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            Equals ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharExtensions.EqualsIgnoreCase(System.Nullable{System.Char},System.Char)">
            <summary>
            Equals ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharExtensions.Range(System.Char,System.Char)">
            <summary>
            To create a range from one to another
            </summary>
            <param name="this"></param>
            <param name="toCharacter"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.RegexExtensions">
            <summary>
            Cosmos <see cref="T:System.Text.RegularExpressions.Regex"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Text.RegexExtensions.GetGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Get group value
            </summary>
            <param name="match"></param>
            <param name="group"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Text.RegexExtensions.SafeGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            To safe group value
            </summary>
            <param name="match"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StringBuilderExtensions">
            <summary>
            Cosmos <see cref="T:System.Text.StringBuilder"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.AppendAll``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Shortcut for adding an array of values to a StringBuilder.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.AppendAll``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Char@)">
            <summary>
            Shortcut for adding an array of values to a StringBuilder.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.AppendWithSeparator``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>
            Appends values to StringBuilder prefixing the provided separator.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.AppendWithSeparator``1(System.Text.StringBuilder,System.Char@,``0[])">
            <summary>
            Appends values to StringBuilder prefixing the provided separator.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.AppendWithSeparator``1(System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.String)">
            <summary>
            Appends a key/value pair to StringBuilder using the provided separators.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToReverseBuilder(System.Text.StringBuilder)">
            <summary>
            Reverse <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToReverseString(System.Text.StringBuilder)">
            <summary>
            Reverse string
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToCharArray(System.Text.StringBuilder)">
            <summary>
            To char array
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToStringBuilder``1(System.ReadOnlySpan{``0}@)">
            <summary>
            To StringBuilder
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToStringBuilder``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To StringBuilder
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToStringBuilder``1(System.ReadOnlySpan{``0}@,System.String@)">
            <summary>
            To StringBuilder
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToStringBuilder``1(System.ReadOnlySpan{``0}@,System.Char@)">
            <summary>
            To StringBuilder
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToStringBuilder``1(System.Collections.Generic.IEnumerable{``0},System.String@)">
            <summary>
            To StringBuilder
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBuilderExtensions.ToStringBuilder``1(System.Collections.Generic.IEnumerable{``0},System.Char@)">
            <summary>
            To StringBuilder
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Convert string to byte array
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToUtf8Bytes(System.String)">
            <summary>
            Convert string to byte array by utf8
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToUtf7Bytes(System.String)">
            <summary>
            Convert string to byte array by utf7
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToUtf32Bytes(System.String)">
            <summary>
            Convert string to byte array by utf32
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToASCIIBytes(System.String)">
            <summary>
            Convert string to byte array by ASCII
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToBigEndianUnicodeBytes(System.String)">
            <summary>
            Convert string to byte array by BigEndian Unicode
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToDefaultBytes(System.String)">
            <summary>
            Convert string to byte array by default
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.ToUnicodeBytes(System.String)">
            <summary>
            Convert string to byte array by unicode
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Convert byte array to string
            </summary>
            <param name="bytes"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByUtf8(System.Byte[])">
            <summary>
            Convert byte array to string by Utf8
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByUtf7(System.Byte[])">
            <summary>
            Convert byte array to string by Utf7
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByUtf32(System.Byte[])">
            <summary>
            Convert byte array to string by Utf32
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByASCII(System.Byte[])">
            <summary>
            Convert byte array to string by ASCII
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByBigEndianUnicode(System.Byte[])">
            <summary>
            Convert byte array to string by BigEndian unicode
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByDefault(System.Byte[])">
            <summary>
            Convert byte array to string by default
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringBytesExtensions.GetStringByUnicode(System.Byte[])">
            <summary>
            Convert byte array to string by Unicode
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDiff.DiffCharsCount(System.String,System.String)">
            <summary>
            Diff chars' count
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDiff.DiffCharsCountIgnoreCase(System.String,System.String)">
            <summary>
            Diff chars' count ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDiff.DiffOnlyOneChar(System.String,System.String)">
            <summary>
            Diff only one char
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigits.GetOnlyLetterOrDigit(System.String)">
            <summary>
            Get only letters and numbers.<br />
            只获取字母和数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigits.GetOnlyDigit(System.String)">
            <summary>
            Get only numbers.<br />
            只获取数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigits.Contains(System.String)">
            <summary>
            Returns whether it contains digit.<br />
            返回是否包含数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigits.ContainsAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of digit.<br />
            至少包含指定数量的数字。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigitsExtensions.DigitsCount(System.String)">
            <summary>
            Total digits
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigitsExtensions.ContainsDigits(System.String)">
            <summary>
            Returns whether it contains digits.<br />
            返回是否包含数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringDigitsExtensions.ContainsDigitsAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of digits.<br />
            至少包含指定数量的数字。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StringExtensions">
            <summary>
            Cosmos <see cref="T:System.String"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Equals ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.EqualsToAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Equals to any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.IndexWholePhrase(System.String,System.String,System.Int32)">
            <summary>
            Index whole phrase
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.IndexOfIgnoreCase(System.String,System.String)">
            <summary>
            Index of ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.LastIndexOfIgnoreCase(System.String,System.String)">
            <summary>
            Last index of ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.LastIndexOfIgnoreCase(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Last index of ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.IndexOfIgnoreCase(System.String,System.Int32,System.String)">
            <summary>
            Index of ignore case
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.LastIndexOfAny(System.String,System.String[])">
            <summary>
            Last index of any
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.Remove(System.String,System.String)">
            <summary>
            Remove
            </summary>
            <param name="text"></param>
            <param name="removeText"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.RemoveFromIgnoreCase(System.String,System.String)">
            <summary>
            Remove from ignore case
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.RemoveDuplicateSpaces(System.String)">
            <summary>
            Remove duplicate space
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.RemoveDuplicateChar(System.String,System.Char)">
            <summary>
            Remove duplicate char
            </summary>
            <param name="me"></param>
            <param name="charRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.RemoveChars(System.String,System.Char[])">
            <summary>
            Remove chars
            </summary>
            <param name="me"></param>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.RemoveAccentsIgnoreCaseAndÑ(System.String)">
            <summary>
            Remove accents ignore case and N
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.RemoveAccentsIgnoreCase(System.String)">
            <summary>
            Remove accents ignore case
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Replace ignore case
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceOnlyWholePhrase(System.String,System.String,System.String)">
            <summary>
            Replace only whole phrase
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceFirstOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace first occurrence
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceLastOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace last occurrence
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceOnlyAtEndIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace only at end ignore case
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replace
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="comparisionType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceRecursive(System.String,System.String,System.String)">
            <summary>
            Replace recursive
            </summary>
            <param name="original"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceCharsWithSpace(System.String,System.Char[])">
            <summary>
            Replace chars with space
            </summary>
            <param name="me"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.ReplaceNumbersWith(System.String,System.Char)">
            <summary>
            Replace numbers with...
            </summary>
            <param name="me"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncate
            </summary>
            <param name="original"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringFilters.FilterChars(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Filter chars
            </summary>
            <param name="text"></param>
            <param name="onlyThesePredicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetters.GetOnlyLetterOrDigit(System.String)">
            <summary>
            Get only letters and numbers.<br />
            只获取字母和数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetters.GetOnlyLetter(System.String)">
            <summary>
            Get only letters.<br />
            只获取字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetters.Contains(System.String)">
            <summary>
            Returns whether it contains letters.<br />
            返回是否包含字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetters.ContainsAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of letters.<br />
            至少包含指定数量的字母。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetterExtensions.LettersCount(System.String)">
            <summary>
            Returns the number of letters contained in the string.<br />
            返回字符串中所包含字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetterExtensions.LowerLettersCount(System.String)">
            <summary>
            Returns the number of lowercase letters in the string.<br />
            返回字符串中所包含小写字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetterExtensions.UpperLettersCount(System.String)">
            <summary>
            Returns the number of uppercase letters in the string.<br />
            返回字符串中所包含大写字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetterExtensions.ContainsLetters(System.String)">
            <summary>
            Returns whether it contains letters.<br />
            返回是否包含字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLetterExtensions.ContainsLettersAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of letters.<br />
            至少包含指定数量的字母。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLines.Count(System.String)">
            <summary>
            Count lines
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLines.AsLines(System.String)">
            <summary>
            Enumerate lines
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLinesExtensions.LineCount(System.String)">
            <summary>
            Line count
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringLinesExtensions.ToLines(System.String)">
            <summary>
            To lines
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.Strings">
            <summary>
            String Utils<br />
            字符串工具
            </summary>
        </member>
        <member name="M:Cosmos.Text.Strings.AvoidNull(System.String)">
            <summary>
            Avoid null, so convert null to empty.<br />
            将 null 转换为 Empty
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.NullToEmpty(System.String)">
            <summary>
            Convert null to empty.<br />
            将 null 转换为 Empty
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.EmptyToNull(System.String)">
            <summary>
            Convert empty to null.<br />
            将 Empty 转换为 null
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Repeat(System.String,System.Int32)">
            <summary>
            Repeat<br />
            重复指定次数的字符
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Repeat(System.Char,System.Int32)">
            <summary>
            Repeat<br />
            重复指定次数的字符
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.PadStart(System.String,System.Int32,System.Char)">
            <summary>
            Padding left
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="appendChar"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.PadEnd(System.String,System.Int32,System.Char)">
            <summary>
            Padding right
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="appendChar"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CommonPrefix(System.String,System.String)">
            <summary>
            Returns the common prefix.<br />
            从左到右，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CommonSuffix(System.String,System.String)">
            <summary>
            Returns the common suffix.<br />
            从右到左，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Text.Strings.NEWLINE">
            <summary>
            New line
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringSimilarity.EvaluateSimilarity(System.String,System.String,System.Double)">
            <summary>
            Evaluate Similarity
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="similarityMinimal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringSimilarity.EvaluateSimilarity(System.String,System.String,System.Double,System.Int32)">
            <summary>
            Evaluate Similarity
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="similarityMinimal"></param>
            <param name="diffFound"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringSimilarity.EvaluateTypeSimilarity(System.String,System.String)">
            <summary>
            Evaluate Type Similarity
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StringSimilarityTypes">
            <summary>
            Type Similarity
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.Any">
            <summary>
            Any
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.Same">
            <summary>
            Same
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.MayorLong">
            <summary>
            Mayor long
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.MinorLong">
            <summary>
            Minor long
            </summary>
        </member>
        <member name="T:Cosmos.ThreeValuedBooleans">
            <summary>
            Three value boolean
            </summary>
        </member>
        <member name="P:Cosmos.ThreeValuedBooleans.True">
            <summary>
            True
            </summary>
        </member>
        <member name="P:Cosmos.ThreeValuedBooleans.False">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Cosmos.ThreeValuedBooleans.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="M:Cosmos.ThreeValuedBooleans.And(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            And operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ThreeValuedBooleans.And(System.Nullable{System.Boolean},System.Nullable{System.Boolean}[])">
            <summary>
            And operator
            </summary>
            <param name="left"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ThreeValuedBooleans.Or(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Or operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ThreeValuedBooleans.Or(System.Nullable{System.Boolean},System.Nullable{System.Boolean}[])">
            <summary>
            Or operator
            </summary>
            <param name="left"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ThreeValuedBooleans.Same(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Same operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Verba.Boolean.DefaultBooleanVerba">
            <summary>
            Default global boolean verba
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.Instance">
            <summary>
            Get a default global boolean verba instance
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.VerbaName">
            <summary>
            Verba name
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.TrueVerbaList">
            <summary>
            True alias list
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.FalseVerbaList">
            <summary>
            False alias list
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager">
            <summary>
            Global boolean verba manager
            </summary>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.AddBooleanVerba(Cosmos.Verba.Boolean.IBooleanVerba)">
            <summary>
            Add boolean verba into <see cref="T:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager"/>
            </summary>
            <param name="verba"></param>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.Determining(System.String)">
            <summary>
            To determine the alas value is true, false or null.
            </summary>
            <param name="verbaAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Verba.Boolean.IBooleanVerba">
            <summary>
            Interface for boolean verba
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.IBooleanVerba.TrueVerbaList">
            <summary>
            True alias list
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.IBooleanVerba.FalseVerbaList">
            <summary>
            False alias list
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Time.DefaultEnglishTimeVerba">
            <summary>
            Default English time verba
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.DefaultEnglishTimeVerba.USEnglish">
            <summary>
            USA English
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Instance">
            <summary>
            Get an english time verba instance
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.VerbaName">
            <summary>
            Verba name
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.LanguageKeys">
            <summary>
            Language Keys
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Now">
            <summary>
            Now
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.JustNow">
            <summary>
            Just now
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Future">
            <summary>
            Future
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Yesterday">
            <summary>
            Yesterday
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Milliseconds">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Weeks">
            <summary>
            Weeks
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Weekends">
            <summary>
            Weekends
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Weekdays">
            <summary>
            Weekdays
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Season">
            <summary>
            Season
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.Ago">
            <summary>
            Ago
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.ComplexString">
            <summary>
            ComplexString
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultEnglishTimeVerba.SpaceString">
            <summary>
            SpaceString
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba">
            <summary>
            Default Simplified Chinese time verba
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.SimplifiedChinese">
            <summary>
            Simplified Chinese
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Instance">
            <summary>
            Get a simplified chinese time verba instance
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.VerbaName">
            <summary>
            Verba name
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.LanguageKeys">
            <summary>
            Language Keys
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Now">
            <summary>
            Now
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.JustNow">
            <summary>
            JustNow
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Future">
            <summary>
            Future
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Yesterday">
            <summary>
            Yesterday
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Milliseconds">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Weeks">
            <summary>
            Weeks
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Weekends">
            <summary>
            Weekends
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Weekdays">
            <summary>
            Weekdays
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Season">
            <summary>
            Season
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.Ago">
            <summary>
            Ago
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.ComplexString">
            <summary>
            ComplexString
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultSimplifiedChineseTimeVerba.SpaceString">
            <summary>
            SpaceString
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba">
            <summary>
            Default Traditional Chines time verba
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.TaiwanTraditionalChinese">
            <summary>
            China Taiwan Traditional Chinese
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.HongKongTraditionalChinese">
            <summary>
            China HongKong Traditional Chinese
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Instance">
            <summary>
            Get a traditional chinese time verba instance
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.VerbaName">
            <summary>
            Verba name
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.LanguageKeys">
            <summary>
            Language Keys
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Now">
            <summary>
            Now
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.JustNow">
            <summary>
            Just Now
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Future">
            <summary>
            Future
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Yesterday">
            <summary>
            Yesterday
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Milliseconds">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Weeks">
            <summary>
            Weeks
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Weekends">
            <summary>
            Weekends
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Weekdays">
            <summary>
            Weekdays
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Season">
            <summary>
            Season
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.Ago">
            <summary>
            Ago
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.ComplexString">
            <summary>
            ComplexString
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.DefaultTraditionalChineseTimeVerba.SpaceString">
            <summary>
            SpaceString
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Time.GlobalTimeVerbaManager">
            <summary>
            Global time verba manager
            </summary>
        </member>
        <member name="M:Cosmos.Verba.Time.GlobalTimeVerbaManager.AddTimeVerba(Cosmos.Verba.Time.ITimeVerba)">
            <summary>
            Add time verba into <see cref="T:Cosmos.Verba.Time.GlobalTimeVerbaManager"/>
            </summary>
            <param name="verba"></param>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.DefaultLanguageKey">
            <summary>
            Gets or sets default language key.
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.CurrentLanguageKey">
            <summary>
            Gets current language key.
            </summary>
        </member>
        <member name="M:Cosmos.Verba.Time.GlobalTimeVerbaManager.GetVerba">
            <summary>
            Get <see cref="T:Cosmos.Verba.Time.ITimeVerba"/> from manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Verba.Time.GlobalTimeVerbaManager.GetVerba(System.String)">
            <summary>
            Get <see cref="T:Cosmos.Verba.Time.ITimeVerba"/> from manager
            </summary>
            <param name="languageKey"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Verba.Time.GlobalTimeVerbaManager.FromVerba(System.Func{Cosmos.Verba.Time.ITimeVerba,System.String})">
            <summary>
            Get value from <see cref="T:Cosmos.Verba.Time.ITimeVerba"/>
            </summary>
            <param name="verbaFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Verba.Time.GlobalTimeVerbaManager.FromVerba(System.String,System.Func{Cosmos.Verba.Time.ITimeVerba,System.String})">
            <summary>
            Get value from <see cref="T:Cosmos.Verba.Time.ITimeVerba"/>
            </summary>
            <param name="languageKey"></param>
            <param name="verbaFunc"></param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Now">
            <summary>
            Now <br />
            现在言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Yesterday">
            <summary>
            Yesterday <br />
            昨天言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Future">
            <summary>
            Future <br />
            未来言词
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.GlobalTimeVerbaManager.Milliseconds">
            <summary>
            Milliseconds <br />
            毫秒言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Seconds">
            <summary>
            Seconds <br />
            秒钟言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Minutes">
            <summary>
            Minutes <br />
            分钟言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Hours">
            <summary>
            小时言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Days">
            <summary>
            Days <br />
            日言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Weeks">
            <summary>
            Weeks <br />
            周言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Weekends">
            <summary>
            Weekends <br />
            周末言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Weekdays">
            <summary>
            Weekdays <br />
            工作日言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Months">
            <summary>
            Months <br />
            月份言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Season">
            <summary>
            Season <br />
            季节言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Year">
            <summary>
            Year <br />
            年言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.Ago">
            <summary>
            Ago <br />
            之前言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.ComplexString">
            <summary>
            ComplexString <br />
            单词复数言词
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.GlobalTimeVerbaManager.SpaceString">
            <summary>
            SpaceString <br />
            单词间隔言词
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Time.ITimeVerba">
            <summary>
            Interface for time verba
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.LanguageKeys">
            <summary>
            Language Keys
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Now">
            <summary>
            Now <br />
            现在
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.JustNow">
            <summary>
            Just Now <br />
            刚刚
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Future">
            <summary>
            Future <br />
            未来
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Yesterday">
            <summary>
            Yesterday <br />
            昨天
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Milliseconds">
            <summary>
            Milliseconds <br />
            毫秒
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Seconds">
            <summary>
            Seconds <br />
            秒
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Minutes">
            <summary>
            Minutes <br />
            分钟
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Hours">
            <summary>
            Hours <br />
            小时
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Days">
            <summary>
            Days <br />
            天
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Weeks">
            <summary>
            Weeks <br />
            周
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Weekends">
            <summary>
            Weekends <br />
            周末
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Weekdays">
            <summary>
            Weekdays <br />
            工作日
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Months">
            <summary>
            Months <br />
            月
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Season">
            <summary>
            Season <br />
            季
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Year">
            <summary>
            Year <br />
            年
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.Ago">
            <summary>
            Ago <br />
            前
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.ComplexString">
            <summary>
            ComplexString <br />
            复数后缀
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Time.ITimeVerba.SpaceString">
            <summary>
            SpaceString <br />
            单词之间的空格符
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Time.TimeVerbaConstant">
            <summary>
            TIme verba constant
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.OneMinute">
            <summary>
            One minute <br />
            一分钟
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.TwoMinutes">
            <summary>
            Tow minutes <br />
            两分钟
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.OneHour">
            <summary>
            One hour <br />
            一小时
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.TwoHours">
            <summary>
            Two hours <br />
            两小时
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.OneDay">
            <summary>
            One day <br />
            一天
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.TwoDays">
            <summary>
            Two days <br />
            两天
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.OneWeek">
            <summary>
            One week <br />
            一周
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.TwoWeeks">
            <summary>
            Two weeks <br />
            两周
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.OneMonth">
            <summary>
            One month <br />
            一月
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.TwoMonths">
            <summary>
            Two months <br />
            两月
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.OneYear">
            <summary>
            One year <br />
            一年
            </summary>
        </member>
        <member name="F:Cosmos.Verba.Time.TimeVerbaConstant.TwoYears">
            <summary>
            Two years <br />
            两年
            </summary>
        </member>
        <member name="T:System.ArgumentInvalidException">
            <summary>
            The exception that is thrown when a invalid parameter is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class.
            </summary>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">An object that describes the source or destination of the serialized data.</param>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class with the name of the parameter that causes this exception.</summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class with a specified error message and the exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.String,System.String)">
            <summary>Initializes an instance of the <see cref="T:System.ArgumentInvalidException"></see> class with a specified error message and the name of the parameter that causes this exception.</summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:System.Runtime.IOSPlatformProvider">
            <summary>
            Interface of Operation System Platform information provider<br />
            用于获取 <see cref="T:System.Runtime.InteropServices.OSPlatform"/> 信息的提供者程序接口
            </summary>
        </member>
        <member name="M:System.Runtime.IOSPlatformProvider.GetCurrentOSPlatform">
            <summary>
            Get current operation system platform information<br />
            获取当前操作系统平台信息（<see cref="T:System.Runtime.InteropServices.OSPlatform"/>）
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.OSPlatformHelper">
            <summary>
            Operation system platform helper<br />
            操作系统平台信息帮助者程序
            </summary>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsMacOS">
            <summary>
            Is current operation system Apple MacOS (OSX)<br />
            当前操作系统是否是苹果 MacOS（OSX） 操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsOSX">
            <summary>
            Is current operation system Apple MacOS (OSX)<br />
            当前操作系统是否是苹果 MacOS（OSX） 操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsWindows">
            <summary>
            Is current operation system Microsoft Windows<br />
            当前操作系统是否为微软视窗（Windows）操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsLinux">
            <summary>
            Is current operation system Linux system<br />
            当前操作系统是否为 Linux 系统
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.OSPlatformProvider">
            <summary>
            Operation System Platform information provider<br />
            用于获取 <see cref="T:System.Runtime.InteropServices.OSPlatform"/> 信息的提供者程序
            </summary>
        </member>
        <member name="M:System.Runtime.OSPlatformProvider.GetCurrentOSPlatform">
            <summary>
            Get current operation system platform information<br />
            获取当前操作系统平台信息（<see cref="T:System.Runtime.InteropServices.OSPlatform"/>）
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.GetNumericValue(System.Char)">
            <summary>
            Get numeric value
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.Repeat(System.Char,System.Int32)">
            <summary>
            Repeat
            </summary>
            <param name="this"></param>
            <param name="repeatCount"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Is WhiteSpace
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsControl(System.Char)">
            <summary>
            Is Control
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsDigit(System.Char)">
            <summary>
            Is Digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsLetter(System.Char)">
            <summary>
            Is Letter
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Is Letter or Digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsLower(System.Char)">
            <summary>
            Is Lower
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsNumber(System.Char)">
            <summary>
            Is Number
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsPunctuation(System.Char)">
            <summary>
            Is Punctuation
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsSeparator(System.Char)">
            <summary>
            Is Separator
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsSymbol(System.Char)">
            <summary>
            Is Symbol
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsSurrogate(System.Char)">
            <summary>
            Is Surrogate
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsSurrogatePair(System.Char,System.Char)">
            <summary>
            Is Surrogate Pair
            </summary>
            <param name="highSurrogate"></param>
            <param name="lowSurrogate"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsHighSurrogate(System.Char)">
            <summary>
            Is High Surrogate
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsLowSurrogate(System.Char)">
            <summary>
            Is Low Surrogate
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ToLower(System.Char)">
            <summary>
            To Lower
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
            To Lower
            </summary>
            <param name="c"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ToLowerInvariant(System.Char)">
            <summary>
            To Lower invariant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.IsUpper(System.Char)">
            <summary>
            Is Upper
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
            To Upper
            </summary>
            <param name="c"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ToUpperInvariant(System.Char)">
            <summary>
            To Upper invariant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ToString(System.Char)">
            <summary>
            ToString
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.ConvertToUtf32(System.Char,System.Char)">
            <summary>
            Convert to utf32
            </summary>
            <param name="highSurrogate"></param>
            <param name="lowSurrogate"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemCharExtensions.GetUnicodeCategory(System.Char)">
            <summary>
            Get unicode category
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:System.SystemDateTimeExtensions">
            <summary>
            Cosmos <see cref="T:System.DateTime"/> basic extensions.
            </summary>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            将时间转换为时间点
            </summary>
            <param name="localDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将时间转换为时间点
            </summary>
            <param name="localDateTime"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToLocalDateTime(System.DateTimeOffset)">
            <summary>
            将时间点转换为时间
            </summary>
            <param name="dateTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemDateTimeExtensions.ToLocalDateTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            将时间点转换为时间
            </summary>
            <param name="dateTimeUtc"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="T:System.SystemStringExtensions">
            <summary>
            Cosmos <see cref="T:System.String"/> extensions.
            </summary>
        </member>
        <member name="M:System.SystemStringExtensions.IsUpper(System.String)">
            <summary>
            Is upper
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.IsLower(System.String)">
            <summary>
            Is lower
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.ToCapitalCase(System.String)">
            <summary>
            To capital case
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.AllCapitals(System.String)">
            <summary>
            To all capitals
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.ToCamelCase(System.String)">
            <summary>
            To camel case
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Contains(System.String,System.String,System.String[])">
            <summary>
            Contains
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Contains(System.String,System.Char)">
            <summary>
            Contains
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Contains(System.String,System.Char,System.Char[])">
            <summary>
            Contains
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.CountOccurrences(System.String,System.Char)">
            <summary>
            Count Occurrences
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.CountOccurrences(System.String,System.String)">
            <summary>
            Count Occurrences
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.EndsWith(System.String,System.String[])">
            <summary>
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.EndsWith(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Ends with ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.EndsWithAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Ends with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.EndsWithAnyIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ends with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            检查字符串是 null 还是 System.String.Empty 字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.IsNotNullNorEmpty(System.String)">
            <summary>
            检查字符串不是 null 或 System.String.Empty 字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            检查字符串是 null、空还是仅由空白字符组成
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.IsNotNullNorWhiteSpace(System.String)">
            <summary>
            检查字符串不是 null、空或由空白字符串组成
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Right(System.String,System.Int32)">
            <summary>
            Cut off from right to left.
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Left(System.String,System.Int32)">
            <summary>
            Cut off from left to right
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeat
            </summary>
            <param name="text"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.StartsWith(System.String,System.String[])">
            <summary>
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.StartsWith(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="string"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Starts with ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.StartsWithAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Starts with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.StartsWithAnyIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Starts with any ignore case
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.ExtractAround(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract around
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.Substring(System.String,System.String)">
            <summary>
            SubString
            </summary>
            <param name="text"></param>
            <param name="startText"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.SubstringFrom(System.String,System.String)">
            <summary>
            SubString from...
            </summary>
            <param name="me"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.SubstringTo(System.String,System.String)">
            <summary>
            SubString to...
            </summary>
            <param name="me"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.TrimAll(System.Collections.Generic.IList{System.String})">
            <summary>
            Trim all
            </summary>
            <param name="texts"></param>
        </member>
        <member name="M:System.SystemStringExtensions.TrimPhrase(System.String,System.String)">
            <summary>
            Trim phrase
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.TrimPhraseStart(System.String,System.String)">
            <summary>
            Trim phrase start
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:System.SystemStringExtensions.TrimPhraseEnd(System.String,System.String)">
            <summary>
            Trim phrase end
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
    </members>
</doc>
